[{"task_id": 2545, "output": ["import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        probability (float): The probability of rainfall today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability of rain during the time Raj is on the way\n    # using the formula for probability of uniform distribution\n    return probability * (1 - probability) * time / 1440\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the result\n        result = calculate_rainfall_probability(probability, time)\n        print(f\"{result:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "def rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        p (float): Probability of rainfalls (0.0 to 1.0)\n        time (int): Time in minutes it takes for Raj to reach his office\n\n    Returns:\n        float: Probability that it rains during the time Raj is on the way\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - p\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    # This is equivalent to 1 minus the probability that it does not rain\n    rain_probability = 1 - (no_rain_probability ** time)\n    \n    return round(rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rainfalls and time\n    p, time = map(float, input().split())\n    \n    # Calculate and print the probability that it rains during the time Raj is on the way\n    print(rainfall_probability(p, time))", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during the time Raj is on his way to the office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n        list: A list of probabilities of rain during the specified time.\n    \"\"\"\n    results = []\n    for p, time in test_cases:\n        # Calculate the probability of rain during the specified time\n        probability = p * (1 - (1 - p) ** (time / 1440))\n        # Round the result to 4 decimal places\n        result = round(probability, 4)\n        results.append(result)\n    return results\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        p, time = map(float, input().split())\n        test_cases.append((p, time))\n\n    # Calculate and print the results\n    results = calculate_rainfall_probability(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n    probability (float): The probability that it will rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - probability\n    \n    # Calculate the probability that it rains during the time it takes for Raj to reach his office\n    rain_probability = 1 - math.pow(no_rain_probability, time / 1440)\n    \n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n        \n        # Calculate and print the probability that it rains during the time it takes for Raj to reach his office\n        print(calculate_rain_probability(probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability():\n    \"\"\"\n    Calculate the probability that it rains during a specified time period.\n    \n    Parameters:\n    T (int): The number of test cases.\n    P (float): The probability of rainfall today.\n    time (int): The time (in minutes) it will take for Raj to reach his office.\n    \n    Returns:\n    float: The probability that it rains during the specified time period.\n    \"\"\"\n    \n    # Read the number of test cases\n    test_cases = int(input())\n    \n    # Iterate over each test case\n    for _ in range(test_cases):\n        # Read the probability of rainfall and time\n        probability, time = map(float, input().split())\n        \n        # Calculate the probability that it rains during the specified time period\n        # using the formula for the probability of the union of two events\n        # (in this case, rain or no rain during the specified time period)\n        # P(rain during time) = P(rain) * P(rain during time | rain) + P(no rain) * P(rain during time | no rain)\n        # P(rain during time | rain) = P(time) / P(time)\n        # P(rain during time | no rain) = 1 - P(time)\n        # P(rain during time) = P(rain) * P(time) / P(time) + (1 - P(rain)) * (1 - P(time))\n        # P(rain during time) = P(rain) + (1 - P(rain)) * (1 - P(time))\n        probability_rain = probability\n        probability_no_rain = 1 - probability\n        probability_rain_during_time = probability_rain + probability_no_rain * (1 - probability)\n        \n        # Print the result\n        print(f\"{probability_rain_during_time:.4f}\")\n\n# Call the function\ncalculate_rainfall_probability()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        probability (float): The probability of rainfalls today.\n        time (int): The time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability of no rain during the entire time\n    no_rain_probability = (1 - probability) ** (1440 / time)\n    # Calculate the probability of rain during the time\n    rain_probability = 1 - no_rain_probability\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    for _ in range(test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n        # Calculate and print the probability\n        print(calculate_rainfall_probability(probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability():\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Returns:\n        float: Probability of rainfall during commute.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Loop through each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and travel time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability of rainfall during commute\n        # Assuming the travel time is a perfect divisor of 1440 minutes\n        commute_minutes = 1440 // time\n        rainfall_probability = probability * commute_minutes\n\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n\n        # Print the result\n        print(rainfall_probability)\n\n# Run the calculator\ncalculate_rainfall_probability()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the given time.\n\n    Args:\n        probability (float): The probability of rain today.\n        time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n        float: The probability that it rains during the given time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the given time\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability that it rains during the given time\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the rainfall probability\n        print(calculate_rainfall_probability(probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the given time.\n\n    Args:\n    probability (float): The probability of rain today.\n    time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n    float: The probability that it rains during the given time.\n    \"\"\"\n    # Calculate the probability that it rains during the given time\n    # This is done by multiplying the probability of rain today with the proportion of the day that has passed\n    # Since time is a perfect divisor of 1440, the proportion of the day that has passed is time / 1440\n    return probability * (time / 1440)\n\ndef main():\n    # Get the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Get the probability of rain and the time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the result\n        result = round(calculate_rainfall_probability(probability, time), 4)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rainfalls and time.\n\n    Returns:\n        list: A list of probabilities that it rains during the given time.\n    \"\"\"\n    rainfall_probabilities = []\n    for probability, time in test_cases:\n        # Calculate the probability that it rains during the given time\n        rainfall_probability = probability * (1 - (1 - probability) ** (time / 1440))\n        rainfall_probabilities.append(round(rainfall_probability, 4))\n    return rainfall_probabilities\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        probability, time = map(float, input().split())\n        test_cases.append((probability, time))\n\n    # Calculate and print the rainfall probabilities\n    rainfall_probabilities = calculate_rainfall_probability(test_cases)\n    for probability in rainfall_probabilities:\n        print(f\"{probability}\")\n\nif __name__ == \"__main__\":\n    main()", "for _ in range(int(input())):\n    # Read the input values\n    probability_of_rain = float(input().split()[0])\n    travel_time = int(input().split()[1])\n\n    # Calculate the probability of rain during the travel time\n    probability_of_rain_during_travel = probability_of_rain * (travel_time / 1440)\n\n    # Print the result rounded to 4 decimal places\n    print(f\"{probability_of_rain_during_travel:.4f}\")", "def calculate_rain_probability(T, inputs):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        T (int): The number of test cases.\n        inputs (list): A list of tuples, where each tuple contains a probability and a time.\n\n    Returns:\n        list: A list of probabilities that it rains during the time Raj is on the way.\n    \"\"\"\n    import math\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each test case\n    for i, (P, time) in enumerate(inputs):\n        # Calculate the probability that it rains during the time Raj is on the way\n        # This is done by multiplying the probability of rain with the time, \n        # then multiplying by the number of ways to divide the time into two parts (before and after the rain)\n        # This is a geometric distribution problem\n        probability = P * time * (1 - P) / 2\n\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n\n        # Append the result to the list\n        results.append(probability)\n\n    return results\n\n\n# Get the number of test cases\nT = int(input())\n\n# Read the inputs\ninputs = [tuple(map(float, input().split())) for _ in range(T)]\n\n# Calculate and print the results\nresults = calculate_rain_probability(T, inputs)\nfor result in results:\n    print(result)", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's trip to the office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability `P` and travel time `time`.\n\n    Returns:\n        list: A list of probabilities for each test case.\n    \"\"\"\n    probabilities = []\n    for p, time in test_cases:\n        # Calculate the probability of rainfall during the trip\n        # Assuming the rainfall probability is independent of time\n        probability = p * time\n        # Normalize the probability to the total possible outcomes\n        probability /= 1440\n        # Round the probability to 4 decimal places\n        probability = round(probability, 4)\n        probabilities.append(probability)\n    return probabilities\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    # Read the test cases\n    test_cases_data = []\n    for _ in range(test_cases):\n        p, time = map(float, input().split())\n        test_cases_data.append((p, time))\n    # Calculate and print the probabilities\n    probabilities = calculate_rainfall_probability(test_cases_data)\n    for probability in probabilities:\n        print(f\"{probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during a specified time interval.\n\n    Args:\n        probability (float): The overall probability of rain.\n        time (int): The time interval in minutes.\n\n    Returns:\n        float: The probability that it rains during the specified time interval.\n    \"\"\"\n    # Calculate the probability that it does not rain during the specified time interval\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability that it rains during the specified time interval\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rain and time\n    probability, time = map(float, input().split())\n    \n    # Calculate and print the rainfall probability\n    print(calculate_rainfall_probability(probability, time))", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability of rain during Raj's commute.\n\n    Args:\n    p (float): Probability of rain (0 to 1)\n    time (int): Time in minutes\n\n    Returns:\n    float: Probability of rain during commute\n    \"\"\"\n    # Calculate the probability of no rain during commute\n    no_rain_probability = (1 - p) ** (time / 1440)\n    # Calculate the probability of rain during commute\n    rain_probability = 1 - no_rain_probability\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    for _ in range(t):\n        # Read the probability of rain and commute time\n        p, time = map(float, input().split())\n        # Calculate and print the probability of rain during commute\n        print(calculate_rain_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(probability, time):\n    \"\"\"\n    Calculate the probability of rain during the given time.\n\n    Args:\n        probability (float): The probability of rain today.\n        time (int): The time it takes to reach the office.\n\n    Returns:\n        float: The probability of rain during the given time.\n    \"\"\"\n    # Calculate the number of 60-minute intervals in the given time\n    intervals = time // 60\n    \n    # Calculate the probability of rain in each interval\n    interval_probability = probability ** (1 / intervals)\n    \n    # Calculate the probability of no rain in each interval\n    no_interval_probability = (1 - probability) ** (1 / intervals)\n    \n    # Calculate the probability of at least one interval with rain\n    rain_probability = 1 - no_interval_probability\n    \n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n        \n        # Calculate and print the probability of rain\n        print(calculate_rain_probability(probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Loop through each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and travel time\n        probability_of_rain, travel_time = map(float, input().split())\n\n        # Calculate the probability of it raining during the travel time\n        # This can be done by multiplying the probability of rain with the ratio of travel time to 1440\n        # The reason for this is that the probability of rain remains constant throughout the day\n        probability_of_rain_during_travel = probability_of_rain * (travel_time / 1440)\n\n        # Print the result rounded to 4 decimal places\n        print(f\"{probability_of_rain_during_travel:.4f}\")\n\ncalculate_rain_probability()", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes Raj to reach his office.\n\n    Args:\n    p (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time it takes Raj to reach his office.\n    \"\"\"\n    # Calculate the probability of rain during the specified time\n    probability = p * time\n    \n    # Since the total number of minutes in a day is 1440, \n    # we calculate the number of times the time period fits into a day\n    times_in_a_day = math.ceil(1440 / time)\n    \n    # Calculate the probability that it rains during the time it takes Raj to reach his office\n    # by considering the number of times the time period fits into a day\n    probability *= (1 - (1 - p)**times_in_a_day)\n    \n    return round(probability, 4)\n\n\ndef main():\n    \"\"\"\n    Read the number of test cases and process each test case.\n    \"\"\"\n    t = int(input())\n    for _ in range(t):\n        p, time = map(float, input().split())\n        print(calculate_probability(p, time))\n\n\nif __name__ == \"__main__\":\n    main()", "for _ in range(int(input())):\n    p, t = map(float, input().split())\n    rain_probability = p * t / 1440\n    print(f\"{rain_probability:.4f}\")", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        rainfall_probability (float): The probability that it will rain today (0 to 1).\n        travel_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time / 1440)\n    # Calculate the probability that it rains during the travel time\n    rain_probability = 1 - no_rain_probability\n    return round(rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    # Calculate and print the probability that it rains during the travel time\n    print(calculate_probability(rainfall_probability, travel_time))", "def rain_probability(t):\n    \"\"\"\n    Calculate the probability of rain during the time Raj is on the way.\n\n    Args:\n        t (float): The probability of rain today.\n\n    Returns:\n        float: The probability of rain during the time Raj is on the way.\n    \"\"\"\n    return min(t, 1 - t)\n\ndef main():\n    \"\"\"\n    Main function to read input and output results.\n    \"\"\"\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability of rain during the time Raj is on the way\n        result = round(rain_probability(probability), 4)\n\n        # Output the result\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        p (float): The probability that it will rain today.\n        time (int): The time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    total_minutes = 1440\n\n    # Calculate the probability of rain during the given time\n    rainfall_probability = p * (time / total_minutes)\n\n    # Return the result rounded to 4 decimal places\n    return round(rainfall_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the rainfall probability\n        print(calculate_rainfall_probability(p, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        p (float): The probability that it will rain today.\n        time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Since the time is a perfect divisor of 1440, we can calculate the total minutes in the day\n    total_minutes = 1440\n\n    # Calculate the probability that it rains during the time Raj is on the way\n    # This is done by multiplying the probability of rain for the day by the ratio of the time to the total minutes\n    # This is because the events are independent, so the probability of rain during the time is the same as the probability of rain for the day\n    rain_probability = p * (time / total_minutes)\n\n    # Return the calculated probability\n    return rain_probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and the time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability of rain during the time\n        print(f\"{calculate_rain_probability(p, time):.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        p (float): The probability of rainfalls today.\n        time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability of no rain during the time Raj is on the way\n    no_rain_probability = (1 - p) ** (time / 1440)\n\n    # The probability that it rains during the time Raj is on the way is 1 - no rain probability\n    rain_probability = 1 - no_rain_probability\n\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and the time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability that it rains during the time Raj is on the way\n        print(calculate_rain_probability(p, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculates the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        test_cases (int): The number of test cases.\n\n    Returns:\n        list: A list of probabilities for each test case.\n    \"\"\"\n    results = []\n    for _ in range(test_cases):\n        # Read input values\n        probability, time_in_minutes = map(float, input().split())\n\n        # Calculate the probability that it rains during the time it takes for Raj to reach his office\n        rainfall_probability = probability * (1 - math.pow(1 - probability, time_in_minutes / 1440))\n\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n\n        # Append the result to the list\n        results.append(str(rainfall_probability))\n\n    return results\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Calculate and display the results\n    results = calculate_rainfall_probability(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's travel time.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rainfall and travel time.\n\n    Returns:\n        list: A list of probabilities of rainfall during Raj's travel time.\n    \"\"\"\n    results = []\n    for p, time in test_cases:\n        # Calculate the probability of rainfall during the travel time\n        # Using the formula for continuous uniform distribution\n        probability = (p - p * math.log(1 - p / time)) / (time * math.log(1 - p / time) + p * math.log(p / time))\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n        results.append(probability)\n    return results\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        p, time = map(float, input().split())\n        test_cases.append((p, time))\n\n    # Calculate and print the results\n    results = calculate_rainfall_probability(test_cases)\n    for result in results:\n        print(f\"{result:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the travel time.\n\n    Args:\n        rainfall_probability (float): The probability of rainfall today.\n        travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** travel_time\n    \n    # Calculate the probability that it rains during the travel time\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the result\n        result = calculate_probability(rainfall_probability, travel_time)\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "for _ in range(int(input())):\n    probability, time = map(float, input().split())\n\n    # Calculate the probability that it will rain during the given time\n    # Since the time is a perfect divisor of 1440, we can multiply the probability by the ratio of the given time to 1440\n    # We then take the minimum between 1 and the result, to ensure the probability is between 0 and 1\n    result = min(1, probability * (time / 1440))\n\n    print(f\"{result:.4f}\")", "def calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability of rain during the time it takes to reach the office.\n\n    Args:\n    p (float): The probability of rain today.\n    time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n    float: The probability of rain during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the probability of no rain\n    no_rain_prob = 1 - p\n    \n    # Calculate the probability of rain during the time it takes to reach the office\n    rain_prob = (1 - no_rain_prob) * (time / 1440)\n    \n    # Round the result to 4 decimal places\n    rain_prob = round(rain_prob, 4)\n    \n    return rain_prob\n\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the probability of rain and time\n    p, time = map(float, input().split())\n    \n    # Calculate and print the probability of rain\n    print(calculate_rain_probability(p, time))", "def calculate_rain_probability():\n    \"\"\"\n    This function calculates the probability that it rains during the time Raj is on the way to his office.\n\n    Parameters:\n    None\n\n    Returns:\n    None\n    \"\"\"\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Iterate over each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability that it does not rain during the time\n        no_rain_probability = (1 - probability) ** (time / 1440)\n\n        # Calculate the probability that it rains during the time\n        rain_probability = 1 - no_rain_probability\n\n        # Round the result to 4 decimal places\n        rain_probability = round(rain_probability, 4)\n\n        # Print the result\n        print(rain_probability)\n\n\nif __name__ == \"__main__\":\n    calculate_rain_probability()", "import math\n\ndef calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's travel to the office.\n\n    Args:\n        probability (float): The probability of rainfall today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability of rainfall during Raj's travel, rounded to 4 decimal places.\n    \"\"\"\n    # Calculate the probability of no rainfall during Raj's travel\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability of rainfall during Raj's travel\n    rain_probability = 1 - no_rain_probability\n    \n    # Return the probability of rainfall during Raj's travel, rounded to 4 decimal places\n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rainfall and travel time\n    probability, time = input().split()\n    probability = float(probability)\n    time = int(time)\n    \n    # Calculate and print the probability of rainfall during Raj's travel\n    print(calculate_probability(probability, time))", "import math\n\ndef calculate_rainfall_probability():\n    \"\"\"\n    Calculate the probability of rain during Raj's trip.\n    \n    Parameters:\n    None\n    \n    Returns:\n    float: Probability of rain during Raj's trip.\n    \"\"\"\n    \n    # Get the number of test cases\n    test_cases = int(input())\n    \n    # Loop through each test case\n    for _ in range(test_cases):\n        # Get the probability of rain and time\n        probability, time = map(float, input().split())\n        \n        # Calculate the probability of rain during Raj's trip\n        # Assuming the time is a perfect divisor of 1440 minutes (1 day)\n        # and the probability of rain is constant throughout the day\n        rainfall_probability = probability * time / 1440\n        \n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n        \n        # Print the result\n        print(rainfall_probability)\n\n# Run the code\ncalculate_rainfall_probability()", "import math\n\ndef calculate_probability_of_rain(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        time (int): The time it takes for Raj to reach his office in minutes.\n        probability (float): The probability that it will rain today.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - probability\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    # We use the formula for the sum of an infinite geometric series: \n    # 1 + x + x^2 +... = 1 / (1 - x)\n    # In this case, x is the probability that it does not rain\n    rain_probability = 1 - math.pow(no_rain_probability, time)\n    \n    # Return the probability that it rains during the time Raj is on the way\n    return rain_probability\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n        \n        # Calculate and print the probability that it rains during the time Raj is on the way\n        print(\"{:.4f}\".format(calculate_probability_of_rain(time, probability)))\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        probability (float): The probability of rainfalls today.\n        time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Since the probability of rainfalls today is the same for any time of day,\n    # we can simply multiply the probability by the time to get the probability that it rains\n    # during the given time period.\n    return probability * time\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rainfalls and the time\n        probability, time = input().split()\n        probability = float(probability)\n        time = int(time)\n\n        # Calculate and print the result\n        result = round(calculate_rain_probability(probability, time), 4)\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's journey.\n\n    Args:\n    - rainfall_probability (float): The probability of rainfall today.\n    - time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    - float: The probability of rainfall during Raj's journey.\n    \"\"\"\n    # Calculate the probability of rainfall during Raj's journey\n    # This is done by multiplying the probability of rainfall today with the time\n    # because the events are independent\n    probability = rainfall_probability * time\n    \n    # Return the calculated probability\n    return round(probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the rainfall probability and time for the current test case\n    rainfall_probability, time = map(float, input().split())\n\n    # Calculate and print the probability of rainfall during Raj's journey\n    print(calculate_probability(rainfall_probability, time))", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - rainfall_probability\n    \n    # Calculate the probability that it rains during the travel time\n    # Since the travel time is a divisor of 1440, we can use the formula for the sum of a geometric series\n    rain_probability = (rainfall_probability * (1 - no_rain_probability ** (1440 // travel_time)))\n    \n    # Return the probability, rounded to 4 decimal places\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n        \n        # Calculate and print the result\n        result = calculate_probability(rainfall_probability, travel_time)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\nimport itertools\n\ndef calculate_probability(rain_probability, commute_time):\n    \"\"\"\n    Calculate the probability of rain during Raj's commute.\n\n    Args:\n    rain_probability (float): The probability of rain today.\n    commute_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability of rain during Raj's commute.\n    \"\"\"\n    # Generate all possible outcomes of the weather report\n    outcomes = list(itertools.product([0, 1], repeat=commute_time))\n\n    # Initialize the count of outcomes with rain during commute\n    rain_count = 0\n\n    # Iterate over each outcome\n    for outcome in outcomes:\n        # Check if it rains during the commute\n        if outcome.count(1) >= 1:\n            # Increment the count of outcomes with rain during commute\n            rain_count += 1\n\n    # Calculate the probability of rain during Raj's commute\n    probability = rain_count / len(outcomes)\n\n    # Return the probability rounded to 4 decimal places\n    return round(probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the input for each test case\nfor _ in range(test_cases):\n    # Read the probability of rain and commute time\n    rain_probability, commute_time = map(float, input().split())\n\n    # Calculate the probability of rain during Raj's commute\n    probability = calculate_probability(rain_probability, commute_time)\n\n    # Print the result\n    print(probability)", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        probability (float): The probability that it will rain today.\n        time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability of rain during the time\n    rainfall_probability = probability * (1 - (1 - probability) ** (1440 / time))\n    return round(rainfall_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability and time\n    probability, time = map(float, input().split())\n\n    # Calculate and print the rainfall probability\n    print(calculate_rainfall_probability(probability, time))", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        p (float): The probability of rainfalls today.\n        time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    total_minutes = 1440\n\n    # Calculate the number of intervals of time with a probability of rain\n    intervals = math.ceil(time / total_minutes)\n\n    # Calculate the probability that it rains during the time Raj is on the way\n    rain_probability = p * intervals\n\n    # Return the result rounded to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rainfalls and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability that it rains during the time Raj is on the way\n        print(calculate_rain_probability(p, time))\n\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        probability (float): The probability that it will rain today.\n        time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time Raj is on the way\n    no_rain_probability = (1 - probability) ** (1440 / time)\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    rain_probability = 1 - no_rain_probability\n    \n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n        \n        # Calculate and print the result\n        result = calculate_rain_probability(probability, time)\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's commute.\n\n    Args:\n        probability (float): The probability of rainfall today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability of rainfall during Raj's commute.\n    \"\"\"\n    # Calculate the probability of no rainfall during Raj's commute\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability of rainfall during Raj's commute\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n    \n    return rain_probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the probability of rainfall during Raj's commute\n        print(calculate_probability(probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during travel time.\n\n    Args:\n        test_cases (list): List of tuples containing probability and travel time.\n\n    Returns:\n        list: List of probabilities for each test case.\n    \"\"\"\n    results = []\n    for p, time in test_cases:\n        # Calculate the probability of rainfall during travel time\n        # using the formula: P(rainfall during time) = P(rainfall) * P(rainfall during remaining time)\n        # Since the remaining time is 1440 - time, and the probability of rainfall remains constant\n        probability = p * (1 - p) * (1440 / time)\n        results.append(round(probability, 4))\n    return results\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Read the test cases\n    test_cases_data = []\n    for _ in range(test_cases):\n        p, time = map(float, input().split())\n        test_cases_data.append((p, time))\n\n    # Calculate and print the results\n    results = calculate_rainfall_probability(test_cases_data)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability(T, inputs):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        T (int): The number of test cases.\n        inputs (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n        list: A list of probabilities for each test case.\n    \"\"\"\n    probabilities = []\n    for p, time in inputs:\n        # Calculate the probability that it rains during the time\n        probability = p * time / 1440\n        # Round the probability to 4 decimal places\n        probability = round(probability, 4)\n        # Convert the probability to a float\n        probability = float(str(probability).rstrip('0').rstrip('.'))\n        probabilities.append(probability)\n    return probabilities\n\n\n# Read the number of test cases\nT = int(input())\n\n# Read the inputs\ninputs = [tuple(map(float, input().split())) for _ in range(T)]\n\n# Calculate and print the probabilities\nfor probability in calculate_probability(T, inputs):\n    print(probability)", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        p (float): The probability of rainfalls today.\n        time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it rains during the time Raj is on the way\n    # This can be done by multiplying the probability of rainfalls today with the ratio of the time spent at the office to the total possible time\n    return p * (time / 1440)\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n\n    # Process each test case\n    for _ in range(t):\n        # Read the probability of rainfalls today and the time\n        p, time = map(float, input().split())\n\n        # Calculate and print the result\n        result = round(calculate_rain_probability(p, time), 4)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rain_probability, commute_time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    rain_probability (float): The probability of rain today.\n    commute_time (int): The duration of Raj's commute in minutes.\n\n    Returns:\n    float: The probability that it rains during Raj's commute, rounded to 4 decimal places.\n    \"\"\"\n    # Calculate the probability of no rain during the commute\n    no_rain_probability = (1 - rain_probability) ** (commute_time / 1440)\n    \n    # Calculate the probability of rain during the commute\n    rain_probability_commute = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability_commute, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and commute time\n    rain_probability, commute_time = map(float, input().split())\n    \n    # Calculate and print the probability of rain during the commute\n    print(calculate_probability(rain_probability, commute_time))", "import math\n\ndef calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n    probability (float): The probability that it will rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # If it does not rain, the probability of rain during the journey is 0\n    if probability == 0:\n        return 0\n    \n    # Calculate the probability that it does not rain during the journey\n    no_rain_probability = (1 - probability) ** time\n    \n    # Calculate the probability that it rains during the journey\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the answer to 4 decimal places\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the probability of rain during the journey\n        print(calculate_probability(probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's journey.\n\n    Args:\n    probability (float): The probability of rainfalls today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during Raj's journey.\n    \"\"\"\n    # Calculate the time in hours since the probability is given per day\n    time_in_hours = time / 60\n    \n    # Calculate the number of intervals of 1 hour in the given time\n    intervals = math.floor(time_in_hours)\n    \n    # Calculate the remaining time in minutes\n    remaining_time_minutes = time % 60\n    \n    # Calculate the remaining time in hours\n    remaining_time_hours = remaining_time_minutes / 60\n    \n    # Calculate the probability of rain in the remaining time\n    remaining_probability = probability * (1 - (1 - probability) ** (1440 // time))\n    \n    # Calculate the overall probability\n    overall_probability = (1 - (1 - probability) ** intervals) * (1 - remaining_probability)\n    \n    # Round the result to 4 decimal places\n    result = round(overall_probability, 4)\n    \n    return result\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n        \n        # Calculate and print the result\n        print(calculate_probability(probability, time))\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(test_cases):\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        time_in_minutes = time / 60  # convert hours to minutes\n        rain_probability = probability * time_in_minutes\n        print(f\"{rain_probability:.4f}\")\n\n\n# get the number of test cases\ntest_cases = int(input())\n\n# call the function with the test cases\ncalculate_rain_probability(test_cases)", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    p (float): The probability of rainfall today.\n    time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of time intervals in a day\n    intervals_in_day = 1440 // time\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    # This is done by multiplying the probability of rainfall today with the number of intervals in a day\n    rainfall_probability = p * intervals_in_day\n    \n    return round(rainfall_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    \n    # Read each test case\n    for _ in range(test_cases):\n        # Read the probability of rainfall and time\n        p, time = map(float, input().split())\n        \n        # Calculate and print the probability of rainfall during the time Raj is on the way\n        print(calculate_rainfall_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's commute.\n\n    Args:\n    probability (float): The probability of rainfall today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability of rainfall during Raj's commute.\n    \"\"\"\n    # Calculate the probability of no rainfall during Raj's commute\n    no_rainfall_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability of rainfall during Raj's commute\n    rainfall_probability = 1 - no_rainfall_probability\n    \n    # Round the result to 4 decimal places\n    return round(rainfall_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rainfall and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the probability of rainfall during Raj's commute\n        print(calculate_rainfall_probability(probability, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during Raj's commute to the office.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain (P) and commute time (time).\n\n    Returns:\n    list: A list of probabilities of rain during Raj's commute, rounded to 4 decimal places.\n    \"\"\"\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each test case\n    for p, time in test_cases:\n        # Calculate the probability of rain during Raj's commute\n        # Since the time is a perfect divisor of 1440, we can calculate the probability of rain during the commute\n        # by multiplying the probability of rain in a minute by the number of minutes in the commute\n        # However, since the probability of rain in a minute is not given, we assume it to be P\n        # So, we simply multiply P by the number of minutes in the commute\n        probability = p * (time / 1440)\n\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n\n        # Append the result to the list\n        results.append(probability)\n\n    # Return the list of results\n    return results\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        p, time = map(float, input().split())\n        test_cases.append((p, time))\n\n    # Calculate the results\n    results = calculate_rain_probability(test_cases)\n\n    # Print the results\n    for result in results:\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during a certain time.\n\n    Args:\n    probability (float): The probability of rain today.\n    time (int): The time it will take to reach the office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time.\n    \"\"\"\n    # Calculate the probability that it rains during the time\n    return probability * time\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and the time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability that it rains during the time\n        probability_rains = calculate_rain_probability(probability, time)\n\n        # Print the result rounded to 4 decimal places\n        print(\"{:.4f}\".format(probability_rains))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability():\n    \"\"\"\n    This function calculates the probability of rain during the time it takes for Raj to reach his office.\n    \n    Parameters:\n    P (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n    \n    Returns:\n    float: The probability of rain during the time it takes for Raj to reach his office.\n    \"\"\"\n    \n    # Check if P is 0\n    if P == 0:\n        # If P is 0, the probability of rain during any time is 0\n        return 0.0000\n    \n    # Calculate the probability of no rain during the time\n    prob_no_rain = (1 - P) ** (time / 1440)\n    \n    # Calculate the probability of rain during the time\n    prob_rain = 1 - prob_no_rain\n    \n    # Return the probability of rain rounded to 4 decimal places\n    return round(prob_rain, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rain and time\n    P, time = map(float, input().split())\n    \n    # Calculate and print the probability of rain during the time\n    print(calculate_probability())", "import math\n\ndef calculate_probability(rainfall_probability, commute_time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's commute.\n\n    Args:\n        rainfall_probability (float): The probability of rainfall today.\n        commute_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability of rainfall during Raj's commute.\n    \"\"\"\n    # Convert commute time from minutes to hours\n    commute_time_hours = commute_time / 60\n\n    # Calculate the probability of no rainfall during the commute\n    no_rainfall_probability = (1 - rainfall_probability) ** (commute_time_hours / 1440)\n\n    # Calculate the probability of rainfall during the commute\n    rainfall_probability_commute = 1 - no_rainfall_probability\n\n    return round(rainfall_probability_commute, 4)\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rainfall and commute time\n    rainfall_probability, commute_time = map(float, input().split())\n\n    # Calculate and print the probability of rainfall during the commute\n    print(calculate_probability(rainfall_probability, commute_time))", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n    list: A list of probabilities rounded to 4 decimal places.\n    \"\"\"\n    result = []\n    for probability, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way\n        rain_probability = probability * (time / 1440)\n        \n        # Round the result to 4 decimal places\n        result.append(round(rain_probability, 4))\n    \n    return result\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the test cases\ntest_cases_list = []\nfor _ in range(test_cases):\n    probability, time = map(float, input().split())\n    test_cases_list.append((probability, time))\n\n# Calculate and print the results\nresults = calculate_rain_probability(test_cases_list)\nfor result in results:\n    print(result)", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n    list: A list of tuples containing the probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    results = []\n    for probability, time in test_cases:\n        # Calculate the probability that it rains during the time it takes for Raj to reach his office\n        rainfall_probability = probability * (1 - math.pow(1 - probability, time / 1440))\n        results.append(round(rainfall_probability, 4))\n    return results\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the test cases\ntest_cases_data = []\nfor _ in range(test_cases):\n    probability, time = map(float, input().split())\n    test_cases_data.append((probability, time))\n\n# Calculate and print the results\nresults = calculate_rainfall_probability(test_cases_data)\nfor result in results:\n    print(result)", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    This function calculates the probability that it rains during Raj's commute.\n    \n    Parameters:\n    test_cases (list): A list of tuples containing the probability of rain and commute time.\n    \n    Returns:\n    None\n    \"\"\"\n    for probability, time in test_cases:\n        # Calculate the probability that it will rain during Raj's commute\n        probability_rain_during_commute = probability * time / 1440\n        \n        # Round the result to 4 decimal places\n        result = round(probability_rain_during_commute, 4)\n        \n        # Print the result\n        print(f\"{result:.4f}\")\n\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    # Read the probability of rain and commute time\n    probability, time = map(float, input().split())\n    \n    # Store the test case\n    test_cases.append((probability, time))\n\n# Calculate and print the result for each test case\ncalculate_rain_probability(test_cases)", "from math import comb\nfrom decimal import Decimal, getcontext\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rain during the time it takes for Raj to reach his office.\n\n    Args:\n        rainfall_probability (float): The probability of rain today.\n        travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability of rain during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Set the precision of the decimal module to 28 places\n    getcontext().prec = 28\n    # Convert the probabilities to Decimal\n    rainfall_probability = Decimal(rainfall_probability)\n    # Calculate the probability of no rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** travel_time\n    # Calculate the probability of rain during the travel time\n    rain_probability = 1 - no_rain_probability\n    # Return the result rounded to 4 decimal places\n    return round(float(rain_probability), 4)\n\ndef main():\n    \"\"\"\n    Main function that reads the input and calculates the probability of rain.\n    \"\"\"\n    # Read the number of test cases\n    test_cases = int(input())\n    # Loop through each test case\n    for _ in range(test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n        # Calculate and print the probability of rain\n        print(calculate_probability(rainfall_probability, travel_time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during a given time interval.\n\n    Args:\n    - probability (float): The probability of rainfall.\n    - time (int): The time interval in minutes.\n\n    Returns:\n    - float: The probability that it rains during the given time interval.\n    \"\"\"\n    # Calculate the probability of no rain during the time interval\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    # Calculate the probability of rain during the time interval\n    rain_probability = 1 - no_rain_probability\n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability and time\n    probability, time = map(float, input().split())\n    # Calculate and print the rainfall probability\n    print(calculate_rainfall_probability(probability, time))", "def calculate_rainfall_probability():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    for _ in range(test_cases):\n        # Read the probability of rainfall and travel time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability of rainfall during travel time\n        rainfall_probability = probability * time\n\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n\n        # Print the result\n        print(f\"{rainfall_probability}\")\n\n# Run the function\ncalculate_rainfall_probability()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during the time it takes for Raj to reach his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain (P) and time (in minutes) for each test case.\n\n    Returns:\n        list: A list of probabilities of rain during the time it takes for Raj to reach his office.\n    \"\"\"\n    results = []\n    for P, time in test_cases:\n        # Calculate the probability of rain during the time it takes for Raj to reach his office\n        probability = P * (1 - P) * math.exp(-P * time / 1440)\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n        results.append(probability)\n    return results\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the input data\ntest_cases = []\nfor _ in range(num_test_cases):\n    P, time = map(float, input().split())\n    test_cases.append((P, time))\n\n# Calculate and print the results\nresults = calculate_rainfall_probability(test_cases)\nfor result in results:\n    print(f\"{result:.4f}\")", "def calculate_probability_of_rain(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rain during the time it takes to travel to the office.\n\n    Args:\n        rainfall_probability (float): The probability of rain today.\n        travel_time (int): The time it takes to travel to the office in minutes.\n\n    Returns:\n        float: The probability of rain during the travel time.\n    \"\"\"\n    # Calculate the probability of no rain during the travel time\n    no_rain_probability = 1 - rainfall_probability\n    \n    # Calculate the probability of rain during the travel time\n    # This is done by multiplying the probability of no rain by the total number of minutes in a day\n    # divided by the travel time and then multiplying by the probability of rain\n    # This is based on the assumption that the rain falls uniformly throughout the day\n    rain_probability = (no_rain_probability / 1440) * rainfall_probability * travel_time\n    \n    # Round the result to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n    \n    return rain_probability\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    \n    # Calculate and print the probability of rain during the travel time\n    print(calculate_probability_of_rain(rainfall_probability, travel_time))", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way.\n\n    Args:\n    p (float): The probability of rainfall today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on his way.\n    \"\"\"\n    # Calculate the probability of not raining during the entire time\n    no_rain_probability = (1 - p) ** (1440 / time)\n    \n    # Calculate the probability that it rains during the time Raj is on his way\n    rainfall_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rainfall_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rainfall and time\n        p, time = map(float, input().split())\n        \n        # Calculate and print the rainfall probability\n        print(calculate_rainfall_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        rain_probability (float): The probability that it will rain today.\n        travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = 1 - rain_probability\n\n    # Calculate the probability that it rains during the travel time\n    rain_probability_during_travel = 1 - (no_rain_probability ** travel_time)\n\n    # Return the result rounded to 4 decimal places\n    return round(rain_probability_during_travel, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the rain probability and travel time\n        rain_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the result\n        print(calculate_probability(rain_probability, travel_time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(P, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        P (float): The probability of rain today.\n        time (int): The time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    minutes_in_a_day = 1440\n\n    # Calculate the number of minutes in a day that are not affected by the rain\n    unaffected_minutes = minutes_in_a_day - time\n\n    # Calculate the probability that it does not rain during the time Raj is on the way\n    no_rain_probability = (1 - P) ** (time / unaffected_minutes)\n\n    # Calculate the probability that it rains during the time Raj is on the way\n    rainfall_probability = 1 - no_rain_probability\n\n    # Round the result to 4 decimal places\n    rainfall_probability = round(rainfall_probability, 4)\n\n    return rainfall_probability\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and travel time\n        P, time = map(float, input().split())\n\n        # Calculate and print the rainfall probability\n        print(calculate_rainfall_probability(P, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    This function calculates the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        test_cases (int): The number of test cases.\n\n    Returns:\n        None\n    \"\"\"\n    for _ in range(test_cases):\n        # Read the input values\n        probability_of_rain = float(input())\n        time_on_way = float(input())\n\n        # Calculate the probability that it rains for the given time\n        # Since the probability of rain (P) is given, we can assume that the rain occurs independently for each minute.\n        # So, the probability that it rains for the given time is P^time_on_way.\n        probability_rains = probability_of_rain ** time_on_way\n\n        # Round the answer to 4 decimal places\n        probability_rains = round(probability_rains, 4)\n\n        # Print the result\n        print(f\"{probability_rains}\")\n\n\n# Get the number of test cases\ntest_cases = int(input())\n\n# Call the function to start the calculation\ncalculate_rain_probability(test_cases)", "import math\n\ndef calculate_probability_of_rainfall(T, inputs):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's travel.\n\n    Args:\n        T (int): Number of test cases.\n        inputs (list): A list of tuples, where each tuple contains the probability of rainfall and travel time.\n\n    Returns:\n        list: A list of probabilities, where each probability corresponds to a test case.\n    \"\"\"\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each test case\n    for probability, time in inputs:\n        # Calculate the probability of rainfall during the travel\n        probability_of_rainfall = probability * (1 - probability) * (time / 1440)\n        \n        # Round the result to 4 decimal places\n        probability_of_rainfall = round(probability_of_rainfall, 4)\n        \n        # Append the result to the list\n        results.append(str(probability_of_rainfall))\n\n    # Return the list of results\n    return results\n\n\n# Read the number of test cases\nT = int(input())\n\n# Read the inputs\ninputs = []\nfor _ in range(T):\n    probability, time = map(float, input().split())\n    inputs.append((probability, time))\n\n# Calculate and print the results\nresults = calculate_probability_of_rainfall(T, inputs)\nfor result in results:\n    print(result)", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during a given time frame.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n        list: A list of probabilities corresponding to each test case.\n    \"\"\"\n    probabilities = []\n    for probability, time in test_cases:\n        # Calculate the rainfall probability using the formula for exponential decay\n        rainfall_probability = probability * (1 - probability) ** (time / 1440)\n        probabilities.append(round(rainfall_probability, 4))\n    return probabilities\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Read the test cases\n    test_cases_list = []\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        test_cases_list.append((probability, time))\n\n    # Calculate and print the rainfall probabilities\n    probabilities = calculate_rainfall_probability(test_cases_list)\n    for probability in probabilities:\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during a given time interval.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability (P) and time (time) for each test case.\n\n    Returns:\n        list: A list of probabilities for each test case.\n    \"\"\"\n    probabilities = []\n    for P, time in test_cases:\n        # Calculate the probability of no rain during the given time\n        no_rain_probability = (1 - P) ** (time / 1440)\n        # Calculate the probability of rain during the given time\n        rain_probability = 1 - no_rain_probability\n        # Round the result to 4 decimal places\n        probabilities.append(round(rain_probability, 4))\n    return probabilities\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    # Read the test cases\n    test_cases_data = [tuple(map(float, input().split())) for _ in range(test_cases)]\n    # Calculate the probabilities\n    probabilities = calculate_rainfall_probability(test_cases_data)\n    # Print the results\n    for probability in probabilities:\n        print(f\"{probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability of rainfall during a specified time period.\n\n    Args:\n    p (float): The overall probability of rainfall.\n    time (int): The time period in minutes.\n\n    Returns:\n    float: The probability of rainfall during the specified time period.\n    \"\"\"\n    # Calculate the probability of no rainfall during the time period\n    no_rainfall_probability = (1 - p) ** (time / 1440)\n    \n    # Calculate the probability of rainfall during the time period\n    rainfall_probability = 1 - no_rainfall_probability\n    \n    # Round the result to 4 decimal places\n    return round(rainfall_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability and time period\n    p, time = map(float, input().split())\n    \n    # Calculate and print the rainfall probability\n    print(calculate_rainfall_probability(p, time))", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        p (float): The probability of rainfalls today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    minutes_in_day = 1440\n\n    # Calculate the number of minutes in a day that are equal to the given time\n    minutes_in_time = time\n\n    # Calculate the probability that it rains during the given time\n    rain_probability = p * (minutes_in_time / minutes_in_day)\n\n    return rain_probability\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rainfalls and time\n    p, time = map(float, input().split())\n\n    # Calculate and print the probability that it rains during the given time\n    print(format(calculate_rain_probability(p, time), \".4f\"))", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during Raj's travel time.\n\n    Args:\n    test_cases (list): A list of tuples containing P and time.\n\n    Returns:\n    list: A list of probabilities that it rains during Raj's travel time.\n    \"\"\"\n    results = []\n    for p, time in test_cases:\n        # Calculate the number of times that 1440 is divisible by time\n        n = 1440 // time\n\n        # Calculate the probability that it rains during Raj's travel time\n        probability = p * (1 - (1 - p) ** n)\n\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n\n        results.append(probability)\n\n    return results\n\n# Get the number of test cases\ntest_cases = int(input())\n\n# Get the test cases\ntest_cases_list = [tuple(map(float, input().split())) for _ in range(test_cases)]\n\n# Calculate the probabilities\nresults = calculate_rain_probability(test_cases_list)\n\n# Print the results\nfor result in results:\n    print(result)", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        test_cases (list): A list of tuples containing probability (P) and time (in minutes) to reach the office.\n\n    Returns:\n        list: A list of probabilities that it rains during the time Raj is on the way.\n    \"\"\"\n    results = []\n    for P, time in test_cases:\n        # Convert probability from string to float\n        P = float(P)\n        \n        # Calculate the probability that it rains during the time Raj is on the way\n        # This is done by multiplying the probability of rain on any given minute by the number of minutes\n        rainfall_probability = P * time\n        \n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n        \n        results.append(rainfall_probability)\n    \n    return results\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the input for each test case\ntest_cases_data = []\nfor _ in range(test_cases):\n    P, time = input().split()\n    test_cases_data.append((P, int(time)))\n\n# Calculate and print the results\nresults = calculate_rainfall_probability(test_cases_data)\nfor result in results:\n    print(result)", "for _ in range(int(input())):\n    probability, time = map(float, input().split())\n    print(round(probability * time, 4))", "import math\n\ndef calculate_rain_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n        probability (float): The probability of rain today.\n        time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    minutes_in_a_day = 1440\n    \n    # Calculate the probability that it rains during the time it takes to reach the office\n    # This is done by multiplying the probability of rain today with the ratio of the time to the total number of minutes in a day\n    rain_probability = probability * (time / minutes_in_a_day)\n    \n    # Return the calculated probability, rounded to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    \"\"\"\n    Main function that reads the input and calculates the probability of rain during the time it takes to reach the office.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain today and the time it takes to reach the office\n        probability, time = map(float, input().split())\n\n        # Calculate and print the probability of rain during the time it takes to reach the office\n        print(calculate_rain_probability(probability, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(probability_of_rain, travel_time):\n    \"\"\"\n    Calculate the probability of rainfall during the travel time.\n\n    Args:\n    - probability_of_rain (float): The probability of rainfall today.\n    - travel_time (int): The time it takes to reach the office.\n\n    Returns:\n    - float: The probability of rainfall during the travel time.\n    \"\"\"\n    # Convert travel time from minutes to hours\n    travel_time_hours = travel_time / 60\n\n    # Calculate the number of hours of rainfall in the travel time\n    hours_of_rainfall = travel_time_hours / (24 * 365)  # assuming a non-leap year\n\n    # Calculate the probability of rainfall during the travel time\n    probability_of_rainfall = probability_of_rain * hours_of_rainfall\n\n    return round(probability_of_rainfall, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and travel time\n        probability_of_rain, travel_time = map(float, input().split())\n\n        # Calculate and print the probability of rainfall during the travel time\n        probability_of_rainfall = calculate_rainfall_probability(probability_of_rain, travel_time)\n        print(probability_of_rainfall)\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the rainfall probability for each test case.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain (P) and the time (in minutes).\n\n    Returns:\n    list: A list of rainfall probabilities.\n    \"\"\"\n    rainfall_probabilities = []\n    for P, time in test_cases:\n        # Calculate the rainfall probability using the formula for uniform distribution\n        rainfall_probability = P * (1 - (1 - P) ** (1440 / time))\n        rainfall_probabilities.append(round(rainfall_probability, 4))\n    return rainfall_probabilities\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        P, time = map(float, input().split())\n        test_cases.append((P, time))\n\n    # Calculate and print the rainfall probabilities\n    rainfall_probabilities = calculate_rainfall_probability(test_cases)\n    for probability in rainfall_probabilities:\n        print(f\"{probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain (P) and time (time) in minutes.\n\n    Returns:\n        list: A list of probabilities that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    rainfall_probabilities = []\n    for p, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way\n        probability = p * (1 - (1 - p) ** (time / 1440))\n        rainfall_probabilities.append(round(probability, 4))\n    return rainfall_probabilities\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        p, time = map(float, input().split())\n        test_cases.append((p, time))\n\n    # Calculate the rainfall probabilities\n    rainfall_probabilities = calculate_rainfall_probability(test_cases)\n\n    # Print the results\n    for probability in rainfall_probabilities:\n        print(f\"{probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        p (float): The probability that it will rain today.\n        time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Calculate the number of hours in the time period\n    hours = time / 60\n    \n    # Calculate the number of days in the time period\n    days = hours / 24\n    \n    # Calculate the probability that it rains during the time period\n    rain_probability = p * math.exp(-p * days)\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the result\n        print(calculate_rain_probability(probability, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        rainfall_probability (float): The probability of rainfall.\n        travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - rainfall_probability\n    \n    # Calculate the number of periods in the travel time\n    periods = math.ceil(travel_time / 1440)\n    \n    # Calculate the probability that it does not rain for any period\n    no_rain_any_period = no_rain_probability ** periods\n    \n    # Calculate the probability that it rains during the travel time\n    rain_any_period = 1 - no_rain_any_period\n    \n    # Round the answer to 4 decimal places\n    return round(rain_any_period, 4)\n\n\ndef main():\n    \"\"\"\n    Read the number of test cases and calculate the probability for each test case.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n        \n        # Calculate and print the result\n        print(calculate_probability(rainfall_probability, travel_time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rain during the travel time.\n\n    Args:\n        rain_probability (float): The probability of rain today.\n        travel_time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n        float: The probability of rain during the travel time.\n    \"\"\"\n    # Calculate the probability of no rain during the travel time\n    no_rain_probability = (1 - rain_probability) ** (travel_time / 1440)\n    \n    # Calculate the probability of rain during the travel time\n    rain_probability_during_travel = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability_during_travel, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    for _ in range(num_test_cases):\n        # Read the probability of rain and travel time\n        rain_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the probability of rain during the travel time\n        result = calculate_probability(rain_probability, travel_time)\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n    list: A list of probabilities rounded to 4 decimal places.\n    \"\"\"\n    probabilities = []\n    for probability, time in test_cases:\n        # Calculate the probability of rain during the given time\n        # Assuming the time is evenly distributed throughout the day\n        probability_rain = probability * (time / 1440)\n        # Round the result to 4 decimal places\n        probability_rain = round(probability_rain, 4)\n        probabilities.append(probability_rain)\n    return probabilities\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    probability, time = map(float, input().split())\n    test_cases.append((probability, time))\n\n# Calculate and print the probabilities\nprobabilities = calculate_rainfall_probability(test_cases)\nfor probability in probabilities:\n    print(f\"{probability}\")", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during the time Raj is on the way.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n    list: A list of probabilities of rain during the time Raj is on the way.\n    \"\"\"\n    results = []\n    for p, time in test_cases:\n        # Calculate the number of 10-minute intervals in the given time\n        intervals = math.floor(time / 10)\n\n        # Calculate the probability of rain during the given time\n        probability = p * (1 - (1 - p) ** intervals)\n\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n\n        results.append(probability)\n\n    return results\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the test cases\ntest_cases_data = []\nfor _ in range(test_cases):\n    p, time = map(float, input().split())\n    test_cases_data.append((p, time))\n\n# Calculate and print the results\nresults = calculate_rainfall_probability(test_cases_data)\nfor result in results:\n    print(result)", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain and time to reach the office.\n\n    Returns:\n    list: A list of probabilities rounded to 4 decimal places.\n    \"\"\"\n    results = []\n    for p, time in test_cases:\n        # Calculate the probability that it rains during the time it takes to reach the office\n        # Assuming that the rainfalls are independent and identically distributed\n        rain_probability = p * (1 - (1 - p) ** (1440 / time))\n        \n        # Round the result to 4 decimal places\n        results.append(round(rain_probability, 4))\n    \n    return results\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    \n    # Read the test cases\n    test_cases_info = []\n    for _ in range(test_cases):\n        p, time = map(float, input().split())\n        test_cases_info.append((p, time))\n    \n    # Calculate and print the results\n    results = calculate_rain_probability(test_cases_info)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    This function calculates the probability that it rains during the time Raj is on the way to his office.\n    \n    Parameters:\n    test_cases (list): A list of tuples containing the probability of rain and the time taken to reach the office.\n    \n    Returns:\n    list: A list of probabilities that it rains during the time Raj is on the way to his office.\n    \"\"\"\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each test case\n    for probability, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way to his office\n        # This is done by multiplying the probability of rain with the fraction of the day that has passed\n        # Since time is a perfect divisor of 1440, we can divide the time by 1440 to get the fraction of the day that has passed\n        result = probability * (time / 1440)\n        \n        # Round the result to 4 decimal places\n        result = round(result, 4)\n        \n        # Append the result to the list\n        results.append(result)\n\n    # Return the list of results\n    return results\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the test cases\ntest_cases_list = []\nfor _ in range(test_cases):\n    probability, time = map(float, input().split())\n    test_cases_list.append((probability, time))\n\n# Calculate the probabilities and print the results\nresults = calculate_rain_probability(test_cases_list)\nfor result in results:\n    print(result)", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n\n    # Calculate the probability that it rains during the time Raj is on the way\n    # This is done by multiplying the probability of rain today with the proportion of the day that Raj spends traveling\n    probability = rainfall_probability * (travel_time / 1440)\n\n    # Return the calculated probability, rounded to 4 decimal places\n    return round(probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the probability that it rains during the time Raj is on the way\n        print(calculate_probability(rainfall_probability, travel_time))\n\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n    rainfall_probability (float): The probability of rainfall today.\n    travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** travel_time\n    \n    # Calculate the probability that it rains during the travel time\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the result\n        print(calculate_probability(rainfall_probability, travel_time))\n\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain and time to reach the office.\n\n    Returns:\n        list: A list of probabilities that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    rainfall_probabilities = []\n    for probability, time in test_cases:\n        # Calculate the rainfall probability\n        rainfall_probability = probability * time / 1440\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n        rainfall_probabilities.append(rainfall_probability)\n    return rainfall_probabilities\n\ndef main():\n    \"\"\"\n    Main function to read the test cases and calculate the rainfall probabilities.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        probability, time = map(float, input().split())\n        test_cases.append((probability, time))\n    # Calculate the rainfall probabilities\n    rainfall_probabilities = calculate_rainfall_probability(test_cases)\n    # Print the results\n    for probability in rainfall_probabilities:\n        print(f\"{probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rainfall `P` and the time `time` in minutes.\n\n    Returns:\n    list: A list of probabilities that it rains during the time Raj is on the way.\n    \"\"\"\n    results = []\n    for P, time in test_cases:\n        # Calculate the probability that it does not rain\n        prob_no_rain = 1 - P\n        \n        # Calculate the probability that it rains during the time Raj is on the way\n        prob_rain = 1 - (1 - P) ** (time // 1440)\n        \n        # Round the result to 4 decimal places\n        result = round(prob_rain, 4)\n        \n        results.append(result)\n    \n    return results\n\ndef main():\n    # Read the number of test cases\n    T = int(input())\n    \n    # Read the test cases\n    test_cases = [tuple(map(float, input().split())) for _ in range(T)]\n    \n    # Calculate and print the results\n    results = calculate_rainfall_probability(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during Raj's travel time.\n\n    Args:\n        test_cases (list): A list of tuples containing probability and time.\n\n    Returns:\n        None\n    \"\"\"\n    for probability, time in test_cases:\n        # Calculate the probability of rain during Raj's travel time\n        # Since the time is a perfect divisor of 1440, we can assume it's a multiple of 1440\n        # So, the probability of rain during Raj's travel time is the same as the given probability\n        # However, we need to consider the probability of no rain during the remaining time\n        # Since the time is a multiple of 1440, the remaining time is also a multiple of 1440\n        # So, the probability of no rain during the remaining time is 1 - probability\n        # The probability of rain during Raj's travel time is the probability of rain during the first part\n        # of the travel time times the probability of rain during the remaining time\n        rain_probability = probability * (1 - probability)\n\n        # Print the result rounded to 4 decimal places\n        print(f\"{rain_probability:.4f}\")\n\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    probability, time = map(float, input().split())\n    test_cases.append((probability, time))\n\n# Calculate and print the results\ncalculate_rain_probability(test_cases)", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during a specified time period.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain (P) and the time (in minutes).\n\n    Returns:\n        list: A list of probabilities corresponding to each test case.\n    \"\"\"\n    result = []\n    for p, time in test_cases:\n        # Calculate the probability of rain during the specified time period\n        probability = p * (time / 1440)\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n        # Ensure the result is not negative\n        result.append(max(0, probability))\n    return result\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    # Read the test cases\n    test_cases_data = [tuple(map(float, input().split())) for _ in range(test_cases)]\n    # Calculate and print the results\n    results = calculate_rain_probability(test_cases_data)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        p (float): The probability of rainfalls today.\n        time (int): The time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the probability of no rain during the time\n    no_rain_probability = (1 - p) ** (time / 1440)\n    \n    # Calculate the probability of rain during the time\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n    \n    return rain_probability\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the test cases\nfor _ in range(test_cases):\n    # Read the probability of rain and time\n    p, time = map(float, input().split())\n    \n    # Calculate and print the probability of rain\n    print(calculate_rainfall_probability(p, time))", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's travel.\n\n    Args:\n    p (float): Probability of rainfall today.\n    time (int): Time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: Probability of rainfall during Raj's travel.\n    \"\"\"\n    # Calculate the time fraction of the day that Raj will be on the way to the office\n    fraction_of_day = time / 1440\n    \n    # Calculate the probability of rainfall during Raj's travel\n    # Using the formula for the probability of an event in a given time interval\n    probability = p * fraction_of_day\n    \n    # Return the calculated probability, rounded to 4 decimal places\n    return round(probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rainfall and travel time\n    p, time = map(float, input().split())\n    \n    # Calculate and print the probability of rainfall during Raj's travel\n    probability = calculate_probability(p, time)\n    print(probability)", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculates the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain (P) and time (in minutes) to reach the office.\n\n    Returns:\n        list: A list of probabilities that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    rainfall_probabilities = []\n\n    for p, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way to his office\n        probability = p * time / 1440\n        rainfall_probabilities.append(round(probability, 4))\n\n    return rainfall_probabilities\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = [tuple(map(float, input().split())) for _ in range(num_test_cases)]\n\n# Calculate and print the rainfall probabilities\nrainfall_probabilities = calculate_rainfall_probability(test_cases)\nfor probability in rainfall_probabilities:\n    print(probability)", "import math\n\ndef calculate_rainfall_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        time (int): Time it takes for Raj to reach his office in minutes.\n        probability (float): Probability of rainfall today.\n\n    Returns:\n        float: Probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of times 1440 can be divided by time\n    # This will give us the number of 1440-minute intervals\n    num_intervals = time // 1440\n\n    # Calculate the probability that it rains during at least one interval\n    # This is 1 minus the probability that it does not rain during any interval\n    # The probability that it does not rain during an interval is (1 - probability) ^ num_intervals\n    probability_rains = 1 - (1 - probability) ** num_intervals\n\n    return round(probability_rains, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the probability that it rains\n        print(calculate_rainfall_probability(time, probability))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        rainfall_probability (float): The probability that it will rain today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of 1440-minute periods in the given time\n    num_periods = time // 1440\n\n    # Calculate the remaining minutes\n    remaining_minutes = time % 1440\n\n    # Calculate the number of full 1440-minute periods in the remaining minutes\n    full_periods = remaining_minutes // 1440\n\n    # Calculate the probability that it rains during the full periods\n    full_period_rainfall_probability = (1 - rainfall_probability) ** num_periods\n\n    # Calculate the probability that it rains during the remaining minutes\n    remaining_minute_rainfall_probability = (1 - rainfall_probability) ** full_periods\n\n    # Calculate the overall probability\n    overall_probability = full_period_rainfall_probability * remaining_minute_rainfall_probability\n\n    return round(overall_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and time\n        rainfall_probability, time = input().split()\n\n        # Calculate and print the probability\n        probability = calculate_probability(float(rainfall_probability), int(time))\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(rain_prob, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to the office.\n\n    Args:\n    rain_prob (float): The probability that it will rain today.\n    travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way to the office.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    total_minutes_in_day = 1440\n\n    # Calculate the number of minutes Raj will be exposed to rain\n    exposed_minutes = travel_time / total_minutes_in_day\n\n    # Calculate the probability that it rains during the time Raj is on the way to the office\n    rain_prob_on_way = rain_prob * exposed_minutes\n\n    return round(rain_prob_on_way, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and travel time\n        rain_prob, travel_time = map(float, input().split())\n\n        # Calculate and print the probability that it rains during the time Raj is on the way to the office\n        print(calculate_rain_probability(rain_prob, travel_time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain (P) and time (in minutes) to reach the office.\n\n    Returns:\n        list: A list of probabilities that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    result = []\n    for P, time in test_cases:\n        # Calculate the probability that it rains during the time it takes for Raj to reach his office\n        rainfall_probability = P * (1 - math.pow(1 - P, time / 1440))\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n        result.append(rainfall_probability)\n    return result\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    # Read the test cases\n    test_cases_data = []\n    for _ in range(test_cases):\n        P, time = map(float, input().split())\n        test_cases_data.append((P, time))\n\n    # Calculate the rainfall probabilities\n    rainfall_probabilities = calculate_rainfall_probability(test_cases_data)\n\n    # Print the results\n    for probability in rainfall_probabilities:\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during a given time period.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n        list: A list of probabilities of rain during the given time period.\n    \"\"\"\n    results = []\n    for probability, time in test_cases:\n        # Convert the probability to a decimal\n        probability = float(probability)\n\n        # Calculate the probability of rain during the given time period\n        # This is done by multiplying the probability of rain with the time period\n        # and then raising it to the power of the time period, divided by the total number of minutes in a day\n        result = probability * (time / 1440) ** 365\n\n        # Round the result to 4 decimal places\n        result = round(result, 4)\n\n        # Append the result to the list\n        results.append(result)\n\n    return results\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        probability, time = map(str, input().split())\n        test_cases.append((probability, int(time)))\n\n    # Calculate the results\n    results = calculate_rain_probability(test_cases)\n\n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability of rain during a given time period.\n\n    Args:\n    probability (float): The probability of rain today.\n    time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability of rain during the given time period.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    total_minutes = 1440\n\n    # Calculate the number of minutes in the given time period\n    given_time_minutes = time\n\n    # Calculate the probability of rain during the given time period\n    rainfall_probability = probability * (given_time_minutes / total_minutes)\n\n    return rainfall_probability\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n\n        # Calculate the rainfall probability\n        rainfall_probability = calculate_rainfall_probability(probability, time)\n\n        # Round the answer to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n\n        # Print the result\n        print(f\"{rainfall_probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability():\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n    \n    Parameters:\n    P (float): The probability that it will rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n    \n    Returns:\n    float: The probability that it rains during Raj's commute.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - P\n    \n    # Calculate the probability that it rains during Raj's commute\n    # This is equivalent to 1 minus the probability that it does not rain\n    # times the fraction of the day that has passed\n    rain_probability = (1 - no_rain_probability) * (time / 1440)\n    \n    return round(rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read and calculate the probability for each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and time\n    probability, time = map(float, input().split())\n    \n    # Calculate and print the result\n    print(calculate_rain_probability())", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    p (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during Raj's commute.\n    \"\"\"\n    # Calculate the probability that it does not rain during Raj's commute\n    prob_no_rain = (1 - p) ** (time / 1440)\n    \n    # Calculate the probability that it rains during Raj's commute\n    prob_rain = 1 - prob_no_rain\n    \n    # Round the result to 4 decimal places\n    prob_rain = round(prob_rain, 4)\n    \n    return prob_rain\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and time\n        p, time = map(float, input().split())\n\n        # Calculate the probability of rain during Raj's commute\n        prob_rain = calculate_probability(p, time)\n\n        # Print the result\n        print(prob_rain)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        p (float): Probability of rainfalls today.\n        time (int): Time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n        float: Probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time\n    no_rain_probability = (1 - p) ** (time / 1440)\n    # Calculate the probability that it rains during the time\n    rain_probability = 1 - no_rain_probability\n    # Round the result to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n    return rain_probability\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    for _ in range(t):\n        # Read the probability of rainfalls and time\n        p, time = map(float, input().split())\n        # Calculate and print the probability that it rains during the time\n        print(calculate_rainfall_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rain_probability, time):\n    \"\"\"\n    Calculate the probability of rain during a given time.\n\n    Args:\n    rain_probability (float): The probability of rain.\n    time (int): The time in minutes.\n\n    Returns:\n    float: The probability of rain during the given time.\n    \"\"\"\n    # Calculate the probability of no rain during the given time\n    no_rain_probability = (1 - rain_probability) ** (time / 1440)\n    \n    # Calculate the probability of rain during the given time\n    rain_probability_time = rain_probability * (1 - no_rain_probability)\n    \n    return rain_probability_time\n\ndef main():\n    # Get the number of test cases\n    test_cases = int(input())\n    \n    for _ in range(test_cases):\n        # Get the probability of rain and time\n        rain_probability, time = input().split()\n        rain_probability = float(rain_probability)\n        time = int(time)\n        \n        # Calculate the probability of rain during the given time\n        probability = calculate_probability(rain_probability, time)\n        \n        # Print the result rounded to 4 decimal places\n        print(\"{:.4f}\".format(probability))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(P, time):\n    \"\"\"\n    Calculate the probability of rain during Raj's commute to the office.\n\n    Args:\n        P (float): The probability of rain today.\n        time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability of rain during Raj's commute.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    minutes_in_day = 1440\n\n    # Calculate the probability of rain during Raj's commute\n    # This is done by multiplying the probability of rain today with the ratio of time spent commuting to the total time in a day\n    probability = P * (time / minutes_in_day)\n\n    # Return the result rounded to 4 decimal places\n    return round(probability, 4)\n\ndef main():\n    # Read the number of test cases\n    with open(0, 'r') as f:\n        num_test_cases = int(f.readline().strip())\n\n    # Read and process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and time\n        with open(0, 'r') as f:\n            P, time = map(float, f.readline().strip().split())\n\n        # Calculate and print the result\n        result = calculate_probability(P, time)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    test_cases (int): The number of test cases.\n\n    Returns:\n    list: A list of probabilities for each test case.\n    \"\"\"\n    probabilities = []\n    for _ in range(test_cases):\n        p, time = map(float, input().split())\n        # Calculate the probability of rain during the time\n        probability = p * (1 - (1 - p) ** (time / 1440))\n        probabilities.append(round(probability, 4))\n    return probabilities\n\ndef main():\n    \"\"\"\n    Main function to handle user input and output.\n    \"\"\"\n    test_cases = int(input())\n    probabilities = calculate_rainfall_probability(test_cases)\n    for probability in probabilities:\n        print(f\"{probability}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        p (float): The probability that it will rain today.\n        time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time Raj is on the way\n    no_rain_probability = (1 - p) ** (time / 1440)\n    # Calculate the probability that it rains during the time Raj is on the way\n    rain_probability = 1 - no_rain_probability\n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    # Read the test cases\n    for _ in range(num_test_cases):\n        # Read the probability and time\n        p, time = map(float, input().split())\n        # Calculate and print the rain probability\n        print(calculate_rain_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n        list: A list of probabilities rounded to 4 decimal places.\n    \"\"\"\n    probabilities = []\n    for probability, time in test_cases:\n        # Calculate the probability of rain during the time\n        rainfall_probability = probability * (time / 1440)\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n        probabilities.append(rainfall_probability)\n    return probabilities\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    probability, time = map(float, input().split())\n    test_cases.append((probability, time))\n\n# Calculate and print the results\nresults = calculate_rainfall_probability(test_cases)\nfor result in results:\n    print(result)", "def calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during a given time period.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rainfall and time.\n\n    Returns:\n        list: A list of probabilities of rainfall during the given time period.\n    \"\"\"\n    results = []\n    for probability, time in test_cases:\n        # Calculate the probability of rainfall during the given time period\n        # Using the formula for the probability of independent events\n        # P(A and B) = P(A) * P(B)\n        # In this case, A is the event that it rains today, and B is the event that it rains during the given time period\n        # Since the time period is a perfect divisor of 1440, we can assume that the probability of rainfall during the given time period is the same as the overall probability of rainfall\n        probability_during_time = probability * time / 1440\n        results.append(round(probability_during_time, 4))\n    return results\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Read the test cases\n    test_cases_data = []\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        test_cases_data.append((probability, time))\n\n    # Calculate and print the results\n    results = calculate_rainfall_probability(test_cases_data)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    p (float): The probability that it will rain today.\n    time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it rains during the time\n    probability = p * (1 - (1 - p) ** (1440 // time))\n    \n    # Round the result to 4 decimal places\n    probability = round(probability, 4)\n    \n    return probability\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability and time for the current test case\n    p, time = map(float, input().split())\n    \n    # Calculate and print the result\n    result = calculate_rain_probability(p, time)\n    print(result)", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        p (float): The probability that it will rain today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the number of intervals of 1440 minutes in the given time\n    num_intervals = time // 1440\n    \n    # Calculate the remaining time in minutes\n    remaining_time = time % 1440\n    \n    # Calculate the number of intervals in which it is certain to rain\n    certain_rain_intervals = num_intervals * p\n    \n    # Calculate the number of intervals in which it is uncertain whether it will rain\n    uncertain_rain_intervals = num_intervals * (1 - p)\n    \n    # Calculate the probability of rain in the remaining time\n    remaining_rain_probability = min(1, p + (remaining_time / 1440))\n    \n    # Calculate the total probability of rain\n    total_rain_probability = certain_rain_intervals + (uncertain_rain_intervals * remaining_rain_probability)\n    \n    # Return the probability rounded to 4 decimal places\n    return round(total_rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and the time it takes for Raj to reach his office\n    p, time = map(float, input().split())\n    \n    # Calculate and print the probability of rain\n    print(calculate_rain_probability(p, time))", "import math\n\ndef calculate_rainfall_probability():\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n    \n    Parameters:\n    p (float): Probability of rainfalls today\n    time (int): Time (in minutes) it will take for Raj to reach his office\n    \n    Returns:\n    float: Probability that it rains during the time Raj is on the way\n    \"\"\"\n    # Check if time is a perfect divisor of 1440\n    if time % 1440!= 0:\n        raise ValueError(\"Time should be a perfect divisor of 1440\")\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    probability = p * (time / 1440)\n    \n    # Round the result to 4 decimal places\n    probability = round(probability, 4)\n    \n    return probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfalls today and the time\n        p, time = map(float, input().split())\n        \n        # Calculate the probability that it rains during the time Raj is on the way\n        probability = calculate_rainfall_probability()\n        \n        # Print the result\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability of rain during the time Raj is on the way.\n    \n    Parameters:\n    p (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n    \n    Returns:\n    float: The probability of rain during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability of it raining during the time Raj is on the way\n    rain_probability = p * (time / 1440)\n    \n    # Return the result rounded to 4 decimal places\n    return round(rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and time\n    p, time = map(float, input().split())\n    \n    # Calculate and print the result\n    print(calculate_rain_probability(p, time))", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    rainfall_probability (float): Probability of rainfall today (0-1)\n    travel_time (int): Time taken to reach office in minutes\n\n    Returns:\n    float: Probability that it rains during Raj's commute\n    \"\"\"\n    # Calculate the number of minutes in a day\n    total_minutes_in_day = 1440\n\n    # Calculate the number of periods of 10 minutes in a day\n    periods_of_10_minutes = total_minutes_in_day // 10\n\n    # Calculate the probability that it rains during Raj's commute\n    commute_probability = (rainfall_probability / periods_of_10_minutes) * (travel_time // 10)\n\n    return round(commute_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rainfall and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the probability that it rains during Raj's commute\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        p (float): Probability of rainfall today (0-0.5)\n        time (int): Time it takes for Raj to reach his office (10-720)\n\n    Returns:\n        float: Probability that it rains during the time Raj is on the way\n    \"\"\"\n    # Calculate the number of days in the time period (1440/10 = 144 days)\n    num_days = time // 1440\n    # Calculate the remaining minutes in the time period\n    remaining_minutes = time % 1440\n\n    # Calculate the number of days with rainfall in the time period\n    num_rainy_days = num_days * p\n\n    # Calculate the probability of rainfall in the remaining minutes\n    prob_rainfall_remaining = p * (remaining_minutes / 1440)\n\n    # Calculate the total probability of rainfall\n    total_prob_rainfall = num_rainy_days + prob_rainfall_remaining\n\n    return round(total_prob_rainfall, 4)\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n\n    # Process each test case\n    for _ in range(t):\n        # Read the probability of rainfall and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the result\n        result = calculate_probability(p, time)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(rain_prob, travel_time):\n    \"\"\"\n    Calculate the probability of rain during Raj's travel time.\n\n    Args:\n        rain_prob (float): Probability of rain today.\n        travel_time (int): Time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: Probability of rain during Raj's travel time.\n    \"\"\"\n    # Calculate the probability of no rain during Raj's travel time\n    no_rain_prob = (1 - rain_prob) ** (travel_time / 1440)\n\n    # Calculate the probability of rain during Raj's travel time\n    rain_prob_travel = 1 - no_rain_prob\n\n    # Return the probability of rain during Raj's travel time, rounded to 4 decimal places\n    return round(rain_prob_travel, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and travel time\n        rain_prob, travel_time = map(float, input().split())\n\n        # Calculate and print the probability of rain during Raj's travel time\n        print(calculate_rain_probability(rain_prob, travel_time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's commute.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rainfall and commute time.\n\n    Returns:\n        list: A list of probabilities for each test case.\n    \"\"\"\n    results = []\n    for probability, time in test_cases:\n        # Calculate the probability of no rain during the commute\n        no_rain_probability = (1 - probability) ** (time // 1440)\n        # Calculate the probability of rain during the commute\n        rain_probability = 1 - no_rain_probability\n        # Round the result to 4 decimal places\n        result = round(rain_probability, 4)\n        results.append(result)\n    return results\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        probability, time = map(float, input().split())\n        test_cases.append((probability, time))\n    # Calculate and print the results\n    results = calculate_rainfall_probability(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability():\n    test_cases = int(input())\n\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        probability *= time\n\n        if probability > 1:\n            probability = 1\n        if probability < 0:\n            probability = 0\n\n        print(f\"{probability:.4f}\")\n\ncalculate_probability()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during a specific time interval.\n\n    Args:\n        probability (float): The overall probability of rain.\n        time (int): The time interval in minutes.\n\n    Returns:\n        float: The probability that it rains during the given time interval.\n    \"\"\"\n    # Calculate the probability of no rain during the given time interval\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability of rain during the given time interval\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the input values for each test case\nfor _ in range(num_test_cases):\n    probability, time = map(float, input().split())\n    \n    # Calculate and print the result for the current test case\n    result = calculate_rainfall_probability(probability, time)\n    print(result)", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's commute.\n\n    Args:\n        test_cases (list): A list of tuples containing probability and time.\n\n    Returns:\n        list: A list of probabilities corresponding to each test case.\n    \"\"\"\n    probabilities = []\n    for probability, time in test_cases:\n        # Calculate the probability of no rainfall during Raj's commute\n        no_rain_probability = (1 - probability) ** (time / 1440)\n        \n        # Calculate the probability of rainfall during Raj's commute\n        rainfall_probability = 1 - no_rain_probability\n        \n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n        \n        probabilities.append(rainfall_probability)\n    \n    return probabilities\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        probability, time = map(float, input().split())\n        test_cases.append((probability, time))\n\n    # Calculate and print the probabilities\n    probabilities = calculate_rainfall_probability(test_cases)\n    for probability in probabilities:\n        print(f\"{probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n    test_cases (int): The number of test cases.\n\n    Returns:\n    None\n    \"\"\"\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n\n        # Calculate the probability of rain during the time\n        rainfall_probability = probability * (time / 1440)\n\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n\n        print(f\"{rainfall_probability:.4f}\")\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\ncalculate_rainfall_probability(test_cases)", "import math\n\ndef calculate_rain_probability(test_cases):\n    results = []\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        total_minutes = 1440\n        minutes_raining = time / total_minutes\n        probability_raining = probability / total_minutes\n        probability_raining_given_time = probability_raining * (1 - (1 - probability_raining) ** (1440 / time))\n        results.append(round(probability_raining_given_time, 4))\n    return results\n\n# Get the number of test cases\ntest_cases = int(input())\n\n# Calculate the results\nresults = calculate_rain_probability(test_cases)\n\n# Print the results\nfor i, result in enumerate(results):\n    print(result)", "import math\n\ndef calculate_probability_of_rain(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rain during Raj's journey.\n\n    Args:\n    - rain_probability (float): The probability of rain today.\n    - travel_time (int): The time taken to reach the office in minutes.\n\n    Returns:\n    - float: The probability of rain during Raj's journey.\n    \"\"\"\n    # Calculate the probability of rain during the time\n    probability_of_rain = (travel_time / 1440) * rain_probability\n\n    # Return the probability, rounded to 4 decimal places\n    return round(probability_of_rain, 4)\n\ndef main():\n    # Get the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Get the probability of rain and travel time\n        rain_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the probability of rain\n        print(calculate_probability_of_rain(rain_probability, travel_time))\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain (P) and time (time) in minutes.\n\n    Returns:\n        None\n    \"\"\"\n    for p, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way\n        # This is done by multiplying the probability of rain (P) by the fraction of the day that Raj is traveling\n        # Since there are 1440 minutes in a day and time is a perfect divisor of 1440, we can calculate the fraction of the day that Raj is traveling\n        probability = p * (time / 1440)\n        \n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n        \n        # Print the result\n        print(f\"{probability:.4f}\")\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the test cases\ntest_cases_data = []\nfor _ in range(test_cases):\n    p, time = map(float, input().split())\n    test_cases_data.append((p, time))\n\n# Calculate and print the result\ncalculate_rain_probability(test_cases_data)", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during a certain time period.\n\n    Args:\n        p (float): The probability of rain (0 \u2264 p \u2264 0.5)\n        time (int): The time in minutes (10 \u2264 time \u2264 720)\n\n    Returns:\n        float: The probability that it rains during the given time period\n    \"\"\"\n    # Calculate the number of minutes in the given time period\n    minutes_in_time_period = time / 1440\n\n    # Calculate the probability that it rains during the given time period\n    rainfall_probability = p * minutes_in_time_period\n\n    # Round the result to 4 decimal places\n    rainfall_probability = round(rainfall_probability, 4)\n\n    return rainfall_probability\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the input for each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and time\n    p, time = map(float, input().split())\n\n    # Calculate and print the rainfall probability\n    print(calculate_rainfall_probability(p, time))", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    test_cases (list): A list of tuples, where each tuple contains the probability of rain (P) and time (in minutes).\n\n    Returns:\n    list: A list of probabilities that it rains during the time Raj is on the way.\n    \"\"\"\n    result = []\n    for P, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way\n        # This is done by multiplying the probability of rain by the fraction of the day that has passed\n        # We assume that the probability of rain remains constant throughout the day\n        probability = P * (time / 1440)\n        result.append(round(probability, 4))\n    return result\n\n\ndef main():\n    \"\"\"\n    Main function to read test cases and print the results.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = [tuple(map(float, input().split())) for _ in range(num_test_cases)]\n\n    # Calculate the probabilities and print the results\n    result = calculate_rain_probability(test_cases)\n    for probability in result:\n        print(probability)\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Loop through each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        P, time = map(float, input().split())\n\n        # Calculate the probability that it rains during the time Raj is on the way\n        # This is done by multiplying the probability of rain P with the fraction of the day that has passed\n        # Since the day has 1440 minutes, we divide the time by 1440 to get the fraction of the day that has passed\n        probability = P * (time / 1440)\n\n        # Round the probability to 4 decimal places\n        probability = round(probability, 4)\n\n        # Print the result\n        print(probability)\n\n# Call the function to start solving the problems\ncalculate_probability()", "def calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n        probability (float): The probability that it will rain today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during Raj's commute.\n    \"\"\"\n    # The probability of an event occurring is independent of the time elapsed\n    # So, the probability of rain during Raj's commute is the same as the probability of rain today\n    return probability\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and time\n    probability, time = map(float, input().split())\n\n    # Calculate and print the probability of rain during Raj's commute\n    print(f\"{calculate_probability(probability, time):.4f}\")", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n    list: A list of probabilities for each test case.\n    \"\"\"\n    results = []\n    for probability, time in test_cases:\n        # Calculate the probability of no rain during the entire day\n        no_rain_probability = (1 - probability) ** (time / 1440)\n        # Calculate the probability of rain during the time\n        rain_probability = 1 - no_rain_probability\n        # Round the result to 4 decimal places\n        result = round(rain_probability, 4)\n        results.append(result)\n    return results\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Read the test cases\n    test_cases_data = []\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        test_cases_data.append((probability, time))\n\n    # Calculate the probabilities\n    probabilities = calculate_rainfall_probability(test_cases_data)\n\n    # Print the results\n    for probability in probabilities:\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n        p (float): The probability that it will rain today.\n        time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the probability that it rains during the time it takes to reach the office\n    # This is the probability that it rains AND the time is less than or equal to the given time\n    return p * min(p, time / 1440)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the probability of rain and time\n    p, time = map(float, input().split())\n\n    # Calculate and print the result\n    print(format(calculate_rain_probability(p, time), '.4f'))", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during the time it takes Raj to reach his office.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain and the time taken.\n\n    Returns:\n    list: A list of the calculated probabilities of rain.\n    \"\"\"\n    probabilities = []\n    for rain_probability, time_taken in test_cases:\n        # Calculate the probability of rain during the time taken\n        # This is done by multiplying the probability of rain with the fraction of the day that has passed\n        probability = rain_probability * (time_taken / 1440)\n        probabilities.append(round(probability, 4))\n    return probabilities\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        rain_probability, time_taken = map(float, input().split())\n        test_cases.append((rain_probability, time_taken))\n\n    # Calculate and print the probabilities\n    probabilities = calculate_rain_probability(test_cases)\n    for probability in probabilities:\n        print(f\"{probability}\")\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability():\n    \"\"\"\n    Calculate the probability of rain during the time it takes for Raj to reach his office.\n    \n    Parameters:\n    p (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n    \n    Returns:\n    float: The probability of rain during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    minutes_in_a_day = 1440\n    \n    # Calculate the fraction of the day that has passed\n    fraction_of_day_passed = time / minutes_in_a_day\n    \n    # Calculate the probability of rain during the time it takes for Raj to reach his office\n    probability_of_rain = p * fraction_of_day_passed\n    \n    return round(probability_of_rain, 4)\n\ndef main():\n    \"\"\"\n    Main function to read input and calculate the probability of rain.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Read the input for each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and the time\n        p, time = map(float, input().split())\n        \n        # Calculate the probability of rain during the time it takes for Raj to reach his office\n        probability_of_rain = calculate_probability()\n        \n        # Print the result\n        print(f\"{probability_of_rain}\")\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during Raj's commute.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain (P) and commute time (time).\n\n    Returns:\n    list: A list of probabilities of rain during Raj's commute.\n    \"\"\"\n    result = []\n    for p, time in test_cases:\n        # Calculate the probability of no rain during the commute\n        no_rain_probability = (1 - p) ** (time / 1440)\n        \n        # Calculate the probability of rain during the commute\n        rain_probability = 1 - no_rain_probability\n        \n        # Round the result to 4 decimal places\n        result.append(round(rain_probability, 4))\n    \n    return result\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    p, time = map(float, input().split())\n    test_cases.append((p, time))\n\n# Calculate and print the probabilities\nresult = calculate_rain_probability(test_cases)\nfor probability in result:\n    print(probability)", "import math\n\ndef calculate_rain_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rain_probability (float): The probability that it will rain today.\n    travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    total_minutes = 1440\n\n    # Calculate the number of minutes in a full cycle of the day\n    cycle_minutes = total_minutes / math.gcd(total_minutes, travel_time)\n\n    # Calculate the number of full cycles that can fit in the travel time\n    full_cycles = travel_time // cycle_minutes\n\n    # Calculate the remaining minutes after full cycles\n    remaining_minutes = travel_time % cycle_minutes\n\n    # Calculate the probability that it rains during the remaining minutes\n    rain_probability_remaining = rain_probability * (1 - (1 - rain_probability) ** (cycle_minutes - 1))\n\n    # Calculate the overall probability\n    probability = (1 - (1 - rain_probability) ** full_cycles) * (1 - rain_probability_remaining) + (rain_probability) * rain_probability_remaining\n\n    return round(probability, 4)\n\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the rain probability and travel time\n    rain_probability, travel_time = input().split()\n    rain_probability = float(rain_probability)\n    travel_time = int(travel_time)\n\n    # Calculate and print the result\n    result = calculate_rain_probability(rain_probability, travel_time)\n    print(result)", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        test_cases (list): A list of tuples, where each tuple contains the probability of rain and time.\n\n    Returns:\n        list: A list of probabilities that it rains during the time Raj is on the way.\n    \"\"\"\n\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - test_cases[0][0]\n    \n    # Initialize a list to store the probabilities\n    probabilities = []\n    \n    # Iterate over each test case\n    for i in range(len(test_cases)):\n        # Calculate the probability that it rains during the time Raj is on the way\n        rain_probability = (test_cases[i][0] * (1440 / test_cases[i][1])) * (1 - no_rain_probability)\n        \n        # Round the probability to 4 decimal places\n        rain_probability = round(rain_probability, 4)\n        \n        # Append the probability to the list\n        probabilities.append(rain_probability)\n    \n    return probabilities\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the test cases\ntest_cases_list = []\nfor _ in range(test_cases):\n    probability, time = map(float, input().split())\n    test_cases_list.append((probability, time))\n\n# Calculate the probabilities\nprobabilities = calculate_rain_probability(test_cases_list)\n\n# Print the probabilities\nfor probability in probabilities:\n    print(probability)", "import math\n\ndef calculate_probability():\n    \"\"\"\n    This function calculates the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        None\n\n    Returns:\n        None\n    \"\"\"\n\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Iterate over each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability that it rains during the time Raj is on the way\n        probability_raining = probability * (time / 1440)\n\n        # Round the result to 4 decimal places\n        result = round(probability_raining, 4)\n\n        # Print the result\n        print(result)\n\n\nif __name__ == \"__main__\":\n    calculate_probability()", "def calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during a given time period.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n    list: A list of probabilities for each test case.\n    \"\"\"\n    import math\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each test case\n    for probability, time in test_cases:\n        # Calculate the probability of rain during the given time period\n        # using the formula for continuous uniform distribution\n        result = probability * (1 - probability) * time / 1440\n\n        # Round the result to 4 decimal places\n        result = round(result, 4)\n\n        # Append the result to the list\n        results.append(result)\n\n    return results\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Read the test cases\n    test_cases_data = []\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        test_cases_data.append((probability, time))\n\n    # Calculate and print the results\n    results = calculate_rainfall_probability(test_cases_data)\n    for result in results:\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n    p (float): The probability that it rains today.\n    time (int): The time (in minutes) it takes to reach the office.\n\n    Returns:\n    float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time it takes to reach the office\n    no_rain_probability = (1 - p) ** (time / 1440)\n    # Calculate the probability that it rains during the time it takes to reach the office\n    rain_probability = 1 - no_rain_probability\n    # Return the probability rounded to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    # Read the test cases\n    for _ in range(num_test_cases):\n        # Read the probability and time\n        p, time = map(float, input().split())\n        # Calculate and print the probability\n        print(calculate_probability(p, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        probability (float): The probability of rainfalls today.\n        time (int): The time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    return probability * time / 1440\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rainfalls and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the rainfall probability\n        rainfall_probability = calculate_rainfall_probability(probability, time)\n        print(f\"{rainfall_probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    test_cases (list): A list of tuples, where each tuple contains the probability of rain (P) and the time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n    list: A list of probabilities that it rains during the time Raj is on the way.\n    \"\"\"\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each test case\n    for probability, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way\n        # by multiplying the probability of rain with the fraction of the day that has passed\n        rain_probability = probability * (time / 1440)\n        \n        # Round the result to 4 decimal places\n        rain_probability = round(rain_probability, 4)\n\n        # Append the result to the list\n        results.append(rain_probability)\n\n    return results\n\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    probability, time = map(float, input().split())\n    test_cases.append((probability, time))\n\n# Calculate and print the results\nresults = calculate_rain_probability(test_cases)\nfor result in results:\n    print(result)", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        p (float): The probability that it will rain today.\n        time (int): The time in minutes it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Calculate the fraction of the day that the time represents\n    fraction_of_day = time / 1440\n\n    # Calculate the probability that it rains during the time Raj is on the way to his office\n    probability = p * fraction_of_day\n\n    # Round the result to 4 decimal places\n    return round(probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and the time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability\n        print(calculate_rain_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        p, time = map(float, input().split())\n        minutes_in_day = 1440\n        time_in_minutes = time\n        probability_of_rain = p\n        probability_of_no_rain = 1 - p\n        total_minutes_in_day = minutes_in_day * time_in_minutes\n        probability_of_rain_today = probability_of_rain * (total_minutes_in_day / minutes_in_day)\n        probability_of_no_rain_today = probability_of_no_rain * (total_minutes_in_day / minutes_in_day)\n        print(f\"{round(probability_of_rain_today, 4)}\")\n\nif __name__ == \"__main__\":\n    solve()", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    time (int): Time taken by Raj to reach his office in minutes.\n    probability (float): Probability of rainfalls today.\n\n    Returns:\n    float: Probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of hours in a day\n    hours_in_a_day = 24\n\n    # Calculate the probability of rain at any given hour\n    hourly_probability = probability / hours_in_a_day\n\n    # Calculate the number of hours in the given time\n    hours_in_time = time / 60\n\n    # Calculate the probability of rain during the given time\n    probability_in_time = hourly_probability * hours_in_time\n\n    return probability_in_time\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Iterate over each test case\nfor _ in range(test_cases):\n    # Read the probability and time\n    probability, time = map(float, input().split())\n\n    # Calculate and print the probability\n    probability_in_time = calculate_probability(time, probability)\n    print(f\"{probability_in_time:.4f}\")", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain (P) and the time (in minutes).\n\n    Returns:\n    list: A list of probabilities rounded to 4 decimal places.\n    \"\"\"\n    probabilities = []\n    for P, time in test_cases:\n        # Calculate the probability of rain during the time\n        probability = P * math.exp(-P * time / 1440)\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n        # Ensure the result is not negative\n        if probability < 0:\n            probability = 0\n        probabilities.append(probability)\n    return probabilities\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        P, time = map(float, input().split())\n        test_cases.append((P, time))\n    # Calculate and print the probabilities\n    probabilities = calculate_rainfall_probability(test_cases)\n    for probability in probabilities:\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    time (int): Time in minutes it will take for Raj to reach his office.\n    probability (float): Probability that it will rain today.\n\n    Returns:\n    float: Probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time\n    no_rain_probability = 1 - probability\n    \n    # Calculate the probability that it rains during the time using the formula for continuous probability\n    rain_probability = probability * time\n    \n    # Calculate the probability that it rains during the time by using the complementary event (no rain)\n    rain_probability_complement = no_rain_probability ** (time / 1440)\n    \n    # Calculate the final probability\n    final_probability = rain_probability - (no_rain_probability ** time)\n    \n    # Return the final probability rounded to 4 decimal places\n    return round(final_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    \n    # Loop through each test case\n    for _ in range(test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n        \n        # Calculate the probability that it rains during the time\n        probability_rains = calculate_probability(time, probability)\n        \n        # Print the result\n        print(probability_rains)\n\nif __name__ == \"__main__\":\n    main()", "for _ in range(int(input())):\n    P, time = map(float, input().split())\n    print(round((P * time) % 1, 4))", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n    test_cases (list): A list of tuples, where each tuple contains the probability of rain (P) and time (in minutes) to reach the office.\n\n    Returns:\n    list: A list of probabilities that it rains during the time Raj is on his way to the office.\n    \"\"\"\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each test case\n    for p, time in test_cases:\n        # Calculate the probability of rain during the time Raj is on his way\n        # This is done by multiplying the probability of rain with the ratio of the time to reach the office\n        # and subtracting the probability of no rain during that time\n        result = p * (1 - (1 - p) ** (time / 1440))\n        \n        # Round the result to 4 decimal places\n        result = round(result, 4)\n\n        # Append the result to the list\n        results.append(result)\n\n    # Return the list of results\n    return results\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    p, time = map(float, input().split())\n    test_cases.append((p, time))\n\n# Calculate and print the results\nresults = calculate_rainfall_probability(test_cases)\nfor result in results:\n    print(result)", "import math\n\ndef calculate_probability(T, test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n    T (int): The number of test cases.\n    test_cases (list): A list of tuples containing the probability of rain and time to reach the office.\n\n    Returns:\n    list: A list of probabilities that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    probabilities = []\n    for probability, time in test_cases:\n        # Calculate the probability that it rains during the time\n        probability_rains = probability * (1 - (1 - probability) ** (time / 1440))\n        probabilities.append(round(probability_rains, 4))\n    return probabilities\n\ndef main():\n    # Get the number of test cases\n    T = int(input())\n\n    # Get the test cases\n    test_cases = []\n    for _ in range(T):\n        probability, time = map(float, input().split())\n        test_cases.append((probability, time))\n\n    # Calculate and print the probabilities\n    probabilities = calculate_probability(T, test_cases)\n    for probability in probabilities:\n        print(f\"{probability}\")\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain (P) and the time (in minutes).\n\n    Returns:\n        list: A list of the probabilities that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    result = []\n    for P, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way\n        rain_probability = P * (1 - (1 - P) ** (time // 1440))\n        result.append(round(rain_probability, 4))\n    return result\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = [tuple(map(float, input().split())) for _ in range(num_test_cases)]\n\n# Calculate and print the results\nresults = calculate_rain_probability(test_cases)\nfor result in results:\n    print(result)", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n        time (int): The time it takes to reach the office in minutes.\n        probability (float): The probability of rain today.\n\n    Returns:\n        float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability that it rains during the time\n    rain_probability = 1 - no_rain_probability\n    \n    # Return the probability rounded to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Iterate over each test case\n    for _ in range(test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the probability\n        print(calculate_probability(time, probability))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(P, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    P (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    P_not_rain = 1 - P\n    \n    # Calculate the probability that it rains during the time\n    # This is the sum of the probability of rain at the start of the time\n    # and the probability of rain at the end of the time\n    P_rain = P * (1 - (P_not_rain ** time))\n    \n    return round(P_rain, 4)\n\n# Read the number of test cases\nT = int(input())\n\n# Read the input for each test case\nfor _ in range(T):\n    # Read the probability of rain and the time\n    P, time = map(float, input().split())\n    \n    # Calculate and print the probability of rain\n    print(calculate_rain_probability(P, time))", "def calculate_probability_of_rain(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rain during the time Raj is on the way to his office.\n\n    Args:\n        rain_probability (float): The probability of rain today.\n        travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability of rain during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability of rain during the travel time\n    # Assuming the rain is uniform and does not change over time\n    probability_of_rain_during_travel = rain_probability * travel_time\n    \n    # Return the probability of rain during the travel time, rounded to 4 decimal places\n    return round(probability_of_rain_during_travel, 4)\n\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and travel time for the current test case\n    rain_probability, travel_time = map(float, input().split())\n    \n    # Calculate and print the probability of rain during the travel time\n    print(calculate_probability_of_rain(rain_probability, travel_time))", "import math\n\ndef calculate_probability(T, cases):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's journey.\n\n    Args:\n    T (int): The number of test cases.\n    cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n    list: A list of probabilities of rainfall during Raj's journey.\n    \"\"\"\n    result = []\n    for probability, time in cases:\n        # Convert the probability to a decimal value\n        probability = float(probability)\n        \n        # Calculate the probability of no rain during Raj's journey\n        no_rain_probability = (1 - probability) ** time\n        \n        # Calculate the probability of rain during Raj's journey\n        rain_probability = 1 - no_rain_probability\n        \n        # Round the result to 4 decimal places\n        result.append(round(rain_probability, 4))\n    \n    return result\n\n# Read the number of test cases\nT = int(input())\n\n# Read the test cases\ncases = [input().split() for _ in range(T)]\n\n# Calculate and print the results\nresults = calculate_probability(T, cases)\nfor result in results:\n    print(result)", "import math\n\ndef calculate_rain_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n    probability (float): The probability of rain today.\n    time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time it takes to reach the office\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability that it rains during the time it takes to reach the office\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Get the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Get the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability that it rains during the time it takes to reach the office\n        result = calculate_rain_probability(probability, time)\n\n        # Print the result\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rain_probability, time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    rain_probability (float): The probability that it will rain today.\n    time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during Raj's commute.\n    \"\"\"\n    # Calculate the probability using the geometric distribution formula\n    probability = 1 - (1 - rain_probability) ** time\n    # Round the result to 4 decimal places\n    return round(probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    # Iterate over each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        rain_probability, time = map(float, input().split())\n        # Calculate the probability\n        probability = calculate_probability(rain_probability, time)\n        # Print the result\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's travel time.\n\n    Args:\n    p (float): The probability of rainfall today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability of rainfall during Raj's travel time, rounded to 4 decimal places.\n    \"\"\"\n    # Calculate the probability of no rainfall during the entire time\n    prob_no_rain = (1 - p) ** (time / 1440)\n    # Calculate the probability of rainfall during Raj's travel time\n    prob_rain = 1 - prob_no_rain\n    # Round the result to 4 decimal places\n    return round(prob_rain, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rainfall and travel time\n    p, time = map(float, input().split())\n    # Calculate and print the result\n    print(calculate_probability(p, time))", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    This function calculates the probability of rain during the time it takes for Raj to reach his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain (P) and the time it takes to reach the office.\n\n    Returns:\n        list: A list of probabilities of rain during the time it takes for Raj to reach his office.\n    \"\"\"\n    import math\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each test case\n    for p, time in test_cases:\n        # Calculate the probability of rain during the time it takes for Raj to reach his office\n        # This is done by raising the probability of no rain to the power of time, and subtracting it from 1\n        # We use the binomial distribution formula for this, where n is the number of trials (time), and k is the number of successes (rain)\n        # The probability of no rain is (1-p), and the probability of rain is p\n        # We round the result to 4 decimal places\n        result = round(1 - (1 - p) ** time, 4)\n        results.append(result)\n\n    return results\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    p, time = map(float, input().split())\n    test_cases.append((p, time))\n\n# Calculate and print the results\nresults = calculate_rain_probability(test_cases)\nfor result in results:\n    print(result)", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        p (float): The probability of rainfalls today.\n        time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the time period in minutes that Raj is on the way\n    time_on_way = time / 1440.0\n\n    # Calculate the probability that it rains during the time Raj is on the way\n    # using the exponential distribution formula\n    probability = (1 - p) * math.exp(-p * time_on_way)\n\n    # Return the calculated probability\n    return probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfalls today and the time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability\n        print(round(calculate_probability(p, time), 4))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        probability (float): The probability of rainfall.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time Raj is on the way\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    rainfall_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rainfall_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability and time for the current test case\n    probability, time = map(float, input().split())\n    \n    # Calculate and print the rainfall probability\n    print(calculate_rainfall_probability(probability, time))", "import math\n\ndef calculate_rain_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n    \n    Args:\n        probability (float): The probability that it will rain today.\n        time (int): The time it takes to reach the office in minutes.\n    \n    Returns:\n        float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the probability that it rains during the time it takes to reach the office\n    # This can be done by multiplying the probability that it rains today by the ratio of the time it rains to the total time\n    # We assume that the time it rains is uniformly distributed throughout the day\n    return probability * (time / 1440)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n        \n        # Calculate and print the result\n        result = calculate_rain_probability(probability, time)\n        print(f\"{result:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    rain_probability (float): Probability of rain today (0.0 to 0.5)\n    travel_time (int): Time taken for Raj to reach his office (10 to 720 minutes)\n\n    Returns:\n    float: Probability that it rains during Raj's commute (rounded to 4 decimal places)\n    \"\"\"\n    # Calculate the probability that it rains during Raj's commute\n    commute_probability = rain_probability * (travel_time / 1440.0)\n    \n    # Round the result to 4 decimal places\n    commute_probability = round(commute_probability, 4)\n    \n    return commute_probability\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and travel time\n        rain_probability, travel_time = map(float, input().split())\n        \n        # Calculate and print the probability of rain during commute\n        print(calculate_probability(rain_probability, travel_time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain (P) and time (in minutes) to reach the office.\n\n    Returns:\n        list: A list of probabilities that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    results = []\n    for p, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way to his office\n        probability = p * (1 - (1 - p) ** (time / 1440))\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n        # Append the result to the list\n        results.append(probability)\n    return results\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        p, time = map(float, input().split())\n        test_cases.append((p, time))\n\n    # Calculate and print the results\n    results = calculate_rainfall_probability(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    p (float): The probability that it will rain today.\n    time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it rains during the time Raj is on the way\n    # by multiplying the probability of rain by the fraction of the day that has passed\n    return p * (time / 1440)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the result\n        result = calculate_rain_probability(p, time)\n        print(f\"{result:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during the time it takes to reach the office.\n\n    Args:\n    test_cases (int): The number of test cases.\n\n    Returns:\n    list: A list of probabilities of rain during the time it takes to reach the office.\n    \"\"\"\n\n    # Define the total minutes in a day\n    total_minutes = 1440\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Loop through each test case\n    for _ in range(test_cases):\n        # Read the input values\n        probability, time = map(float, input().split())\n\n        # Calculate the probability of rain during the time it takes to reach the office\n        # This is done by multiplying the probability of rain with the fraction of the day that has passed\n        # We use the floor division operator (//) to get the integer part of the division\n        result = probability * (time // total_minutes)\n\n        # Round the result to 4 decimal places\n        result = round(result, 4)\n\n        # Append the result to the list\n        results.append(result)\n\n    # Return the list of results\n    return results\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Call the function to calculate the rain probabilities\n    results = calculate_rain_probability(test_cases)\n\n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    rainfall_probability (float): The probability of rainfall today.\n    travel_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during Raj's commute.\n    \"\"\"\n    # Calculate the probability that it does not rain during Raj's commute\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time / 1440)\n    \n    # Calculate the probability that it rains during Raj's commute\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n    \n    return rain_probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n        \n        # Calculate and print the result\n        print(calculate_probability(rainfall_probability, travel_time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during a given time interval.\n\n    Args:\n        test_cases (list): A list of tuples containing probability (P) and time (time) values.\n\n    Returns:\n        list: A list of probabilities that it rains during the given time interval.\n    \"\"\"\n    results = []\n    for P, time in test_cases:\n        # Calculate the probability that it does not rain\n        no_rain_probability = 1 - P\n        # Calculate the probability that it rains during the given time interval\n        rainfall_probability = no_rain_probability * (1 - (1 - P) ** (1440 / time))\n        # Round the result to 4 decimal places\n        results.append(round(rainfall_probability, 4))\n    return results\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    # Read the test cases\n    test_cases_data = [tuple(map(float, input().split())) for _ in range(test_cases)]\n    # Calculate the results\n    results = calculate_rainfall_probability(test_cases_data)\n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during a given time period.\n\n    Args:\n    p (float): The probability of rain today (0 \u2264 p \u2264 0.5)\n    time (int): The time it will take for Raj to reach his office (10 \u2264 time \u2264 720)\n\n    Returns:\n    float: The probability that it rains during the time period (rounded to 4 decimal places)\n    \"\"\"\n    # Calculate the number of minutes in a day\n    minutes_in_day = 1440\n\n    # Calculate the fraction of the day that has passed\n    fraction_of_day = time / minutes_in_day\n\n    # Calculate the probability of rain during the time period\n    rainfall_probability = p * fraction_of_day\n\n    # Return the result, rounded to 4 decimal places\n    return round(rainfall_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the rainfall probability\n        print(calculate_rainfall_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability():\n    test_cases = int(input())\n\n    for _ in range(test_cases):\n        probability = float(input().split()[0])\n        travel_time = int(input().split()[1])\n\n        # Calculate the number of minutes in a day\n        minutes_in_day = 1440\n\n        # Calculate the probability of rain during the travel time\n        rainfall_probability = (probability / minutes_in_day) * travel_time\n\n        # Calculate the cumulative distribution function (CDF) of the uniform distribution\n        cdf = 1 - math.pow(1 - probability, travel_time / minutes_in_day)\n\n        # Calculate the rainfall probability\n        rainfall_probability = cdf\n\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n\n        print(f\"{rainfall_probability}\")\n\nif __name__ == \"__main__\":\n    calculate_rainfall_probability()", "import math\n\ndef calculate_rainfall_probability():\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n    \n    Parameters:\n    p (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office.\n    \n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - p\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    rainfall_probability = 1 - (1 - p) ** (time / 1440)\n    \n    # Return the result rounded to 4 decimal places\n    return round(rainfall_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and time\n        p, time = map(float, input().split())\n        \n        # Calculate and print the rainfall probability\n        print(calculate_rainfall_probability())\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(P, time):\n    \"\"\"\n    Calculate the probability that it rains during the travel time.\n\n    Args:\n    P (float): The probability of rain today.\n    time (int): The travel time in minutes.\n\n    Returns:\n    float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    prob_no_rain = (1 - P) ** (time / 1440)\n    # Calculate the probability that it rains during the travel time\n    prob_rain = 1 - prob_no_rain\n    # Round the result to 4 decimal places\n    return round(prob_rain, 4)\n\n# Read the number of test cases\nT = int(input())\n\n# Read the test cases\nfor _ in range(T):\n    # Read the probability of rain and travel time\n    P, time = map(float, input().split())\n    # Calculate and print the probability that it rains during the travel time\n    print(calculate_probability(P, time))", "import math\n\ndef calculate_probability_of_rain(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        rain_probability (float): The probability that it will rain today.\n        travel_time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rain_probability) ** (travel_time / 1440)\n    \n    # Calculate the probability that it rains during the travel time\n    rain_probability_during_travel = 1 - no_rain_probability\n    \n    return round(rain_probability_during_travel, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the rain probability and travel time\n        rain_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the probability that it rains during the travel time\n        print(calculate_probability_of_rain(rain_probability, travel_time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n        rainfall_probability (float): The probability that it will rain today.\n        travel_time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the number of cycles in 1440 minutes\n    cycles = math.floor(1440 / travel_time)\n    \n    # Calculate the cumulative rainfall probability\n    cumulative_probability = 1 - (1 - rainfall_probability) ** cycles\n    \n    # Round the result to 4 decimal places\n    return round(cumulative_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read and process each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    \n    # Calculate and print the result\n    result = calculate_rainfall_probability(rainfall_probability, travel_time)\n    print(result)", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n    p (float): The probability of rainfalls today.\n    time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on his way.\n    \"\"\"\n    # Calculate the probability that it will not rain\n    prob_no_rain = 1 - p\n    \n    # Calculate the probability that it rains during the time Raj is on his way\n    # using the formula for the probability of a uniform distribution\n    prob_rain = (time / 1440) * p\n    \n    # The probability that it rains during the time Raj is on his way is the same as the probability of a uniform distribution\n    # So, we can directly calculate it as the product of p and the ratio of time to 1440\n    return round(prob_rain, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Read the input for each test case\n    for _ in range(num_test_cases):\n        p, time = map(float, input().split())\n        \n        # Calculate and print the probability that it rains during the time Raj is on his way\n        print(calculate_rainfall_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        probability (float): The probability of rain today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time Raj is on the way\n    no_rain_probability = (1 - probability) ** (time / 1440)\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the probability of rain\n        print(calculate_rain_probability(probability, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        rainfall_probability (float): The probability that it will rain today.\n        time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during Raj's commute, rounded to 4 decimal places.\n    \"\"\"\n    # Calculate the probability of no rain during the commute\n    no_rain_probability = 1 - rainfall_probability\n    \n    # Calculate the probability of rain during the commute using the formula for continuous probability\n    rain_probability = no_rain_probability * (1 - no_rain_probability) ** (time / 1440)\n    \n    # Return the probability, rounded to 4 decimal places\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        rainfall_probability, time = map(float, input().split())\n\n        # Calculate and print the probability of rain during the commute\n        print(calculate_probability(rainfall_probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n        p (float): The probability of rainfall today (0 to 0.5).\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on his way to the office.\n    \"\"\"\n    # Calculate the probability that it rains during the time Raj is on his way to the office\n    # This is equivalent to the probability of rainfall today multiplied by the fraction of the day that has passed\n    probability = p * (time / 1440)\n    \n    # Round the result to 4 decimal places\n    probability = round(probability, 4)\n    \n    return probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and the time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability that it rains during the time Raj is on his way to the office\n        print(calculate_rainfall_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    - rainfall_probability (float): The probability of rainfall today.\n    - travel_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    - float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of years in 1440 minutes\n    years = 1440 // travel_time\n    \n    # Calculate the probability of no rainfall for a single year\n    no_rainfall_probability = (1 - rainfall_probability) ** travel_time\n    \n    # Calculate the probability of no rainfall for the total number of years\n    no_rainfall_total_years = no_rainfall_probability ** years\n    \n    # Calculate the probability of rainfall during the time Raj is on the way\n    rainfall_probability_total_years = 1 - no_rainfall_total_years\n    \n    # Return the result rounded to 4 decimal places\n    return round(rainfall_probability_total_years, 4)\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = input().split()\n    rainfall_probability = float(rainfall_probability)\n    travel_time = int(travel_time)\n    \n    # Calculate and print the result\n    result = calculate_probability(rainfall_probability, travel_time)\n    print(result)", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's commute.\n\n    Args:\n    p (float): The probability of rainfall today (0 to 0.5).\n    time (int): The time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability of rainfall during Raj's commute.\n    \"\"\"\n    # Calculate the probability of no rainfall during Raj's commute\n    no_rain_probability = (1 - p) ** (1440 // time)\n\n    # Calculate the probability of rainfall during Raj's commute\n    rain_probability = 1 - no_rain_probability\n\n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rainfall and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability of rainfall\n        print(calculate_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "def rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's commute to the office.\n\n    Args:\n    probability (float): The probability of rainfall today (0-0.5).\n    time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability of rainfall during Raj's commute, rounded to 4 decimal places.\n    \"\"\"\n    return round((1 - probability) ** (time / 1440), 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        probability = min(1 - probability, 1)  # Ensure probability is between 0 and 1\n        probability = max(probability, 0)  # Ensure probability is between 0 and 1\n\n        result = rainfall_probability(probability, time)\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rain during Raj's commute.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n        list: A list of probabilities of rain during Raj's commute.\n    \"\"\"\n    results = []\n    for probability, time in test_cases:\n        # Calculate the probability of no rain during the commute\n        no_rain_probability = (1 - probability) ** (time / 1440)\n        # Calculate the probability of rain during the commute\n        rain_probability = 1 - no_rain_probability\n        # Round the result to 4 decimal places\n        result = round(rain_probability, 4)\n        results.append(result)\n    return results\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    # Read the test cases\n    test_cases = []\n    for _ in range(num_test_cases):\n        probability, time = map(float, input().split())\n        test_cases.append((probability, time))\n    # Calculate and print the results\n    results = calculate_rain_probability(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rain during Raj's travel time.\n\n    Args:\n        rainfall_probability (float): The probability of rainfall today.\n        travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability of rain during Raj's travel time.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    total_minutes = 1440\n\n    # Calculate the number of minutes in the travel time\n    travel_minutes = travel_time / 60\n\n    # Calculate the probability of rain during the travel time\n    # using the formula for the probability of a uniform distribution\n    # over a finite interval\n    probability = (rainfall_probability * total_minutes) / (total_minutes - travel_minutes)\n\n    return round(probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the result\n        result = calculate_probability(rainfall_probability, travel_time)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability():\n    # Read the number of test cases\n    T = int(input())\n\n    # Loop through each test case\n    for _ in range(T):\n        # Read the probability of rain and time\n        P = float(input().split()[0])\n        time = int(input().split()[1])\n\n        # Calculate the probability that it rains during the time\n        probability = min(P, 1 - P) * time / 1440\n\n        # Round the answer to 4 decimal places\n        probability = round(probability, 4)\n\n        # Print the result\n        print(probability)\n\nif __name__ == \"__main__\":\n    calculate_probability()", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes Raj to reach his office.\n\n    Args:\n        p (float): The probability of rain.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time it takes Raj to reach his office.\n    \"\"\"\n    # Calculate the probability that it doesn't rain during the time it takes Raj to reach his office\n    no_rain_probability = (1 - p) ** (time / 1440)\n    \n    # Calculate the probability that it rains during the time it takes Raj to reach his office\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n    \n    return rain_probability\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rain and the time it takes for Raj to reach his office\n    p, time = map(float, input().split())\n    \n    # Calculate and print the result\n    result = calculate_probability(p, time)\n    print(result)", "import math\n\ndef calculate_probability_of_rain(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n        p (float): The probability of rain today.\n        time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on his way to the office.\n    \"\"\"\n    # Calculate the probability that it rains during the time Raj is on his way\n    # This is done by multiplying the probability of rain today with the ratio of time\n    # that the rain is present to the total time\n    return p * (time / 1440)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and travel time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability of rain during travel time\n        print(round(calculate_probability_of_rain(p, time), 4))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n    p (float): The probability of rain today.\n    time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    minutes_in_day = 1440\n    \n    # Calculate the probability that it rains at any point during the day\n    p_rain_anytime = p\n    \n    # Calculate the probability that it does not rain at any point during the day\n    p_no_rain_anytime = 1 - p\n    \n    # Calculate the probability that it does not rain during the time it takes to reach the office\n    p_no_rain_time = (p_no_rain_anytime) ** time\n    \n    # Calculate the probability that it rains during the time it takes to reach the office\n    p_rain_time = 1 - p_no_rain_time\n    \n    return round(p_rain_time, 4)\n\ndef main():\n    # Get the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Get the probability of rain and time\n        p, time = map(float, input().split())\n        \n        # Calculate and print the result\n        print(calculate_rain_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(p, time):\n    \"\"\"\n    Calculate the probability of rain during a given time.\n\n    Args:\n        p (float): The probability of rain today.\n        time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n        float: The probability of rain during the given time.\n    \"\"\"\n    # Calculate the fraction of the day that has passed\n    fraction_passed = time / 1440.0\n\n    # Calculate the probability of rain during the given time\n    probability = p * fraction_passed\n\n    return round(probability, 4)\n\ndef main():\n    # Get the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Get the probability of rain and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the result\n        result = calculate_rain_probability(p, time)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability():\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        p (float): Probability of rainfall today\n        time (int): Time it takes for Raj to reach his office\n\n    Returns:\n        float: Probability that it rains during the time Raj is on the way\n    \"\"\"\n    return 1 - (1 - p) ** time\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read each test case and calculate the rainfall probability\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the rainfall probability\n        probability = calculate_rainfall_probability()\n        print(f\"{probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "def calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n        list: A list of probabilities of rain during the time Raj is on the way.\n    \"\"\"\n    import math\n\n    def calculate_rain_probability(p, t):\n        \"\"\"\n        Calculate the probability that it rains during the time Raj is on the way.\n\n        Args:\n            p (float): The probability of rain.\n            t (int): The time it takes for Raj to reach his office.\n\n        Returns:\n            float: The probability that it rains during the time Raj is on the way.\n        \"\"\"\n        # Calculate the number of times the probability of rain can fit into the time\n        num_times = t // math.floor(1440 / t)\n        \n        # Calculate the probability that it rains during the time Raj is on the way\n        return (1 - (1 - p) ** num_times)\n\n    # Calculate and print the probabilities for each test case\n    for p, t in test_cases:\n        print(round(calculate_rain_probability(p, t), 4))\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the test cases and calculate the probabilities\ncalculate_rain_probability([tuple(map(float, input().split())) for _ in range(test_cases)])", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n    \n    Parameters:\n    test_cases (int): The number of test cases.\n    \n    Returns:\n    list: A list of probabilities for each test case.\n    \"\"\"\n    probabilities = []\n    \n    for _ in range(test_cases):\n        # Get the probability of rain and time from the input\n        probability, time = map(float, input().split())\n        \n        # Calculate the probability that it rains during the time Raj is on the way\n        rain_probability = probability * (time / 1440)\n        \n        # Round the probability to 4 decimal places\n        rain_probability = round(rain_probability, 4)\n        \n        # Append the probability to the list\n        probabilities.append(str(rain_probability))\n    \n    return probabilities\n\ndef main():\n    # Get the number of test cases\n    test_cases = int(input())\n    \n    # Calculate the probabilities for each test case\n    probabilities = calculate_rain_probability(test_cases)\n    \n    # Print the probabilities\n    for probability in probabilities:\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability(rain_probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rain_probability (float): The probability of rain today.\n    time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    return time / 1440\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Read each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and the time\n        rain_probability, time = map(float, input().split())\n\n        # Calculate and print the probability\n        probability = calculate_probability(rain_probability, time)\n        print(f\"{probability:.4f}\")\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(probability_of_rain, travel_time):\n    \"\"\"\n    Calculate the probability of rain during the time Raj is on his way to the office.\n\n    Args:\n    probability_of_rain (float): The probability that it will rain today.\n    travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability of rain during the time Raj is on his way.\n    \"\"\"\n    # Since the probability of rain is constant, we can use the formula for exponential decay\n    # The probability of rain during the time Raj is on his way is given by 1 - (1 - probability_of_rain)^travel_time / 1440\n    # We divide by 1440 because there are 1440 minutes in a day\n    return 1 - (1 - probability_of_rain) ** (travel_time / 1440)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and travel time\n    probability_of_rain, travel_time = map(float, input().split())\n\n    # Calculate the probability of rain during the time Raj is on his way\n    probability_of_rain_during_travel = calculate_rain_probability(probability_of_rain, travel_time)\n\n    # Print the result, rounded to 4 decimal places\n    print(f\"{probability_of_rain_during_travel:.4f}\")", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n    p (float): The probability of rain.\n    time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    minutes_in_a_day = 1440\n    \n    # Calculate the number of minutes in the day that are less than or equal to the travel time\n    minutes_less_than_or_equal_to_travel_time = math.floor(minutes_in_a_day / time)\n    \n    # Calculate the probability that it rains during the time it takes to reach the office\n    probability = (p * minutes_less_than_or_equal_to_travel_time + (1 - p) * (minutes_in_a_day - minutes_less_than_or_equal_to_travel_time)) / minutes_in_a_day\n    \n    # Return the probability rounded to 4 decimal places\n    return round(probability, 4)\n\n\ndef main():\n    \"\"\"\n    Main function to read the input and print the output.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Read each test case and print the result\n    for _ in range(num_test_cases):\n        # Read the probability of rain and travel time\n        p, time = map(float, input().split())\n        \n        # Calculate and print the probability\n        print(calculate_probability(p, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(rainfall_probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        rainfall_probability (float): The probability that it will rain today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the probability of no rain during the given time\n    no_rain_probability = (1 - rainfall_probability) ** (1440 / time)\n\n    # Calculate the probability of rain during the given time\n    rain_probability = 1 - no_rain_probability\n\n    # Return the probability of rain during the given time, rounded to 4 decimal places\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the rainfall probability and time\n        rainfall_probability, time = map(float, input().split())\n\n        # Calculate and print the probability of rain during the given time\n        print(calculate_rainfall_probability(rainfall_probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during a specified time.\n\n    Args:\n        p (float): The probability of rainfall.\n        time (int): The time in minutes.\n\n    Returns:\n        float: The probability that it rains during the specified time.\n    \"\"\"\n    # Calculate the probability of no rainfall\n    no_rain_probability = 1 - p\n    \n    # Calculate the probability that it does not rain during the specified time\n    no_rain_time_probability = (no_rain_probability) ** (time / 1440)\n    \n    # Calculate the probability that it rains during the specified time\n    rain_time_probability = 1 - no_rain_time_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_time_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability of rainfall during the specified time\n        print(calculate_rainfall_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        test_cases (list): A list of tuples, where each tuple contains the probability of rain (P) and the time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n        list: A list of probabilities, one for each test case.\n    \"\"\"\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each test case\n    for p, time in test_cases:\n        # Calculate the probability that it rains during the time Raj is on the way\n        # This is done by multiplying the probability of rain (P) with the time (in minutes) divided by 1440\n        # and rounding to 4 decimal places\n        result = round(p * time / 1440, 4)\n\n        # Append the result to the list\n        results.append(result)\n\n    # Return the list of results\n    return results\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    p, time = map(float, input().split())\n    test_cases.append((p, time))\n\n# Calculate and print the results\nresults = calculate_rain_probability(test_cases)\nfor result in results:\n    print(result)", "def rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability of rain during a given time interval.\n\n    Args:\n        probability (float): The probability of rain today (0-0.5).\n        time (int): The time it takes for Raj to reach his office (10-720 minutes).\n\n    Returns:\n        float: The probability of rain during the given time interval (0-1).\n    \"\"\"\n    # Calculate the probability of no rain during the given time interval\n    no_rain_probability = (1 - probability) ** (time // 1440)\n    \n    # Calculate the probability of rain during the given time interval\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the input data\nfor _ in range(num_test_cases):\n    # Read the probability of rain and time\n    probability, time = map(float, input().split())\n    \n    # Calculate and print the probability of rain\n    print(rainfall_probability(probability, time))", "import math\n\ndef calculate_probability():\n    \"\"\"\n    This function calculates the probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Loop through each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and the time it takes to reach the office\n        probability_of_rain, time_to_office = map(float, input().split())\n\n        # Calculate the probability of rain during the time to the office\n        probability_rain_during_time = probability_of_rain * time_to_office\n\n        # Calculate the number of 1440 minute intervals in the given time\n        num_intervals = time_to_office // 1440\n\n        # Calculate the remaining minutes after subtracting the full intervals\n        remaining_minutes = time_to_office % 1440\n\n        # Calculate the probability of rain during the remaining minutes\n        probability_rain_during_remaining_minutes = probability_of_rain * remaining_minutes / 1440\n\n        # Calculate the total probability of rain during the time to the office\n        total_probability = probability_rain_during_time + probability_rain_during_remaining_minutes\n\n        # Round the result to 4 decimal places and print\n        print(f\"{total_probability:.4f}\")\n\ncalculate_probability()", "def calculate_probability_of_rain(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    rain_probability (float): The probability that it will rain today.\n    travel_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Calculate the probability that it rains during the travel time\n    # This can be modeled as the product of the probability of rain and the ratio of the travel time to the total possible time\n    # Since the total possible time is 1440 minutes (1 day), we divide the travel time by 1440\n    probability_of_rain_during_travel = rain_probability * (travel_time / 1440)\n\n    # Return the result rounded to 4 decimal places\n    return round(probability_of_rain_during_travel, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and travel time\n        rain_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the result\n        print(calculate_probability_of_rain(rain_probability, travel_time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the rainfall probability for each test case.\n\n    Args:\n    test_cases (list): A list of tuples containing the probability of rain and time.\n\n    Returns:\n    list: A list of rainfall probabilities.\n    \"\"\"\n    rainfall_probabilities = []\n    for probability, time in test_cases:\n        # Calculate the rainfall probability\n        probability_of_rainfall = probability * (time / 1440)\n        # Round the result to 4 decimal places\n        probability_of_rainfall = round(probability_of_rainfall, 4)\n        rainfall_probabilities.append(probability_of_rainfall)\n    return rainfall_probabilities\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the test cases\ntest_cases = []\nfor _ in range(num_test_cases):\n    probability, time = map(float, input().split())\n    test_cases.append((probability, time))\n\n# Calculate the rainfall probabilities\nrainfall_probabilities = calculate_rainfall_probability(test_cases)\n\n# Print the results\nfor probability in rainfall_probabilities:\n    print(f\"{probability:.4f}\")", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        time (float): The time it takes for Raj to reach his office in minutes.\n        probability (float): The probability of rainfall today.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    minutes_in_a_day = 1440\n\n    # Calculate the probability of no rain during the time\n    no_rain_probability = (1 - probability) ** (time / minutes_in_a_day)\n\n    # Calculate the probability of rain during the time\n    rain_probability = 1 - no_rain_probability\n\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the result\n        print(calculate_probability(time, probability))\n\n\nif __name__ == \"__main__\":\n    main()"]}]